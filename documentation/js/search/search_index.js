var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/controllers/AppController.html",[0,1.283,1,2.053]],["body/controllers/AppController.html",[0,2.066,1,3.306,2,1.659,3,0.397,4,0.343,5,0.343,6,3.437,7,0.571,8,1.9,9,4.881,10,1.191,11,0.032,12,0.771,13,4.117,14,1.525,15,1.611,16,0.494,17,0.923,18,2.937,19,3.437,20,0.397,21,0.057,22,2.387,23,2.654,24,1.659,25,4.117,26,0.025,27,0.025]],["title/modules/AppModule.html",[28,1.398,29,2.053]],["body/modules/AppModule.html",[1,2.911,2,1.558,3,0.26,4,0.225,5,0.225,11,0.032,16,0.587,17,0.606,18,2.853,19,2.255,20,0.26,21,0.037,26,0.019,27,0.019,28,1.697,29,3.891,30,1.295,31,1.853,32,2.255,33,2.255,34,2.255,35,3.146,36,3.146,37,2.853,38,2.241,39,1.566,40,1.566,41,2.702,42,2.493,43,2.493,44,2.702,45,2.255,46,2.702,47,1.961,48,1.42,49,4.516,50,3.867,51,2.255,52,3.228,53,2.255,54,3.579,55,1.741,56,3.867,57,2.702,58,2.702,59,2.255,60,1.029,61,1.741,62,2.702,63,2.702,64,2.702,65,2.702,66,2.493,67,2.702,68,2.702,69,1.961,70,2.255,71,1.566,72,0.506,73,2.702,74,2.255,75,2.702,76,2.702,77,2.702,78,1.088,79,2.702,80,1.42,81,2.702,82,2.702,83,2.702,84,2.702,85,2.702,86,2.702,87,2.702,88,2.702,89,2.702,90,2.702]],["title/injectables/AppService.html",[18,1.674,91,0.921]],["body/injectables/AppService.html",[3,0.414,4,0.358,5,0.358,7,0.595,8,1.95,9,4.953,11,0.032,12,0.804,14,1.59,15,1.653,16,0.414,17,0.963,18,2.767,20,0.414,21,0.059,24,1.729,26,0.026,27,0.026,91,1.522,92,2.058,93,3.584,94,4.293,95,4.293,96,1.348,97,3.116]],["title/controllers/AuthController.html",[0,1.283,98,2.053]],["body/controllers/AuthController.html",[0,1.847,2,1.118,3,0.267,4,0.232,5,0.232,7,0.385,8,1.461,10,1.14,11,0.032,12,0.738,14,1.461,16,0.528,17,0.623,20,0.267,21,0.063,22,1.609,24,1.588,26,0.019,27,0.019,71,3.175,72,1.025,98,2.541,99,2.317,100,2.015,101,3.328,102,1.182,103,4.572,104,3.291,105,3.943,106,3.056,107,2.776,108,4.991,109,3.943,110,2.624,111,3.623,112,3.623,113,2.776,114,1.588,115,1.345,116,1.588,117,2.541,118,3.943,119,2.393,120,2.776,121,2.776,122,2.776,123,2.317,124,3.328,125,3.328,126,2.015,127,0.947,128,2.41,129,2.317,130,2.317,131,2.658,132,2.317,133,2.317,134,2.317,135,2.776,136,2.776,137,2.776,138,2.776,139,2.776,140,2.776]],["title/modules/AuthModule.html",[28,1.398,35,1.846]],["body/modules/AuthModule.html",[2,1.709,3,0.297,4,0.257,5,0.257,11,0.032,16,0.569,17,0.691,20,0.297,21,0.042,26,0.021,27,0.021,28,1.862,30,1.477,31,2.033,35,3.552,37,2.976,38,2.459,39,1.787,40,1.787,42,2.734,43,2.734,45,2.573,53,3.541,54,3.793,55,1.987,69,2.238,70,2.573,98,3.126,128,3.248,129,2.573,141,2.573,142,3.082,143,2.573,144,2.573,145,3.282,146,3.082,147,3.541,148,4.242,149,1.987,150,3.082,151,2.238,152,3.082,153,3.082,154,3.082,155,3.082,156,3.082,157,3.082,158,3.082,159,3.082]],["title/classes/AuthResponseDTO.html",[21,0.044,131,1.846]],["body/classes/AuthResponseDTO.html",[3,0.378,4,0.327,5,0.327,7,0.544,10,1.135,11,0.032,12,0.932,15,1.563,16,0.378,20,0.378,21,0.054,26,0.025,27,0.025,72,0.735,97,3.613,102,0.88,114,1.581,115,1.338,116,1.581,127,1.338,131,2.885,160,1.581,161,4.562,162,3.276,163,1.697,164,5.465,165,2.063,166,4.977,167,4.977,168,4.154,169,2.849,170,4.977,171,4.977,172,2.616,173,3.925]],["title/injectables/AuthService.html",[91,0.921,128,1.674]],["body/injectables/AuthService.html",[3,0.213,4,0.184,5,0.184,7,0.306,8,1.235,11,0.033,12,0.752,14,1.658,16,0.505,17,0.495,20,0.213,21,0.055,24,1.343,26,0.016,27,0.016,60,1.069,71,2.928,72,0.752,78,1.343,91,0.964,92,1.059,101,3.248,102,0.495,103,2.784,104,2.784,106,2.594,110,1.753,114,1.618,115,1.37,116,1.618,117,2.15,119,2.421,128,1.753,130,1.844,131,1.28,132,1.844,133,1.844,134,1.844,151,1.603,165,1.753,168,4.216,174,1.844,175,3.335,176,3.666,177,2.209,178,1.964,179,5.243,180,2.209,181,3.335,182,3.335,183,2.209,184,3.335,185,3.335,186,3.248,187,3.335,188,2.209,189,2.784,190,1.603,191,1.603,192,1.844,193,2.421,194,2.15,195,1.933,196,2.329,197,2.421,198,2.15,199,2.421,200,2.421,201,2.928,202,2.589,203,2.209,204,1.844,205,1.844,206,1.844,207,2.209,208,1.844,209,2.209,210,2.209,211,2.784,212,3.335,213,3.335,214,3.335,215,3.335,216,3.335,217,3.335,218,2.15,219,2.421,220,2.209]],["title/classes/CreateTodoDto.html",[21,0.044,221,1.674]],["body/classes/CreateTodoDto.html",[3,0.324,4,0.28,5,0.28,7,0.466,10,1.466,11,0.032,12,0.949,15,1.701,16,0.433,20,0.324,21,0.07,26,0.022,27,0.022,60,1.197,72,0.949,96,1.824,102,1.214,115,1.925,127,1.146,160,1.354,163,1.534,169,3.681,172,2.846,221,2.364,222,2.805,223,2.899,224,3.755,225,3.639,226,5.07,227,5.415,228,3.361,229,3.755,230,3.681,231,3.361,232,1.812,233,1.974,234,3.361,235,2.805]],["title/classes/CreateUserDTO.html",[21,0.044,119,1.527]],["body/classes/CreateUserDTO.html",[3,0.363,4,0.314,5,0.314,7,0.522,10,1.401,11,0.032,12,0.907,15,1.777,16,0.467,20,0.363,21,0.078,26,0.024,27,0.024,72,0.907,78,2.159,80,2.817,97,3.517,102,0.844,119,2.322,127,1.283,160,1.516,163,1.652,172,2.817,236,3.141,237,4.845,238,4.845,239,4.845,240,4.845,241,3.517,242,3.763,243,3.763,244,3.89,245,2.426]],["title/classes/GlobalExceptionsFilter.html",[21,0.044,246,2.312]],["body/classes/GlobalExceptionsFilter.html",[3,0.281,4,0.244,5,0.244,7,0.405,8,1.514,11,0.032,12,0.765,14,1.082,16,0.394,17,0.655,20,0.281,21,0.04,22,1.693,23,1.883,26,0.02,27,0.02,72,0.765,74,3.935,102,0.655,114,1.646,115,1.394,116,1.646,117,1.883,160,1.177,165,2.148,190,2.967,191,3.706,196,1.693,198,1.883,201,2.959,218,3.291,246,2.967,247,2.439,248,4.087,249,4.087,250,4.087,251,4.087,252,3.412,253,4.087,254,3.412,255,4.087,256,4.087,257,4.087,258,4.087,259,4.714,260,2.921,261,5.568,262,2.921,263,4.087,264,5.105,265,2.921,266,4.087,267,4.087,268,2.439,269,2.921,270,2.921,271,4.087,272,2.921,273,2.921,274,2.921,275,2.921,276,2.921,277,2.921,278,2.921,279,2.921,280,2.921,281,2.921,282,4.087,283,2.921,284,2.921,285,2.921,286,2.921,287,2.921,288,2.921]],["title/injectables/JwtAuthGuard.html",[91,0.921,289,2.312]],["body/injectables/JwtAuthGuard.html",[3,0.438,4,0.379,5,0.379,11,0.031,16,0.525,17,1.019,20,0.438,21,0.063,26,0.027,27,0.027,91,1.576,92,2.179,149,2.93,289,3.955,290,3.794,291,4.545,292,2.389,293,4.545]],["title/injectables/JwtStrategy.html",[91,0.921,145,1.846]],["body/injectables/JwtStrategy.html",[3,0.296,4,0.256,5,0.256,7,0.426,8,1.568,10,0.889,11,0.032,12,0.907,14,1.138,16,0.545,17,0.689,20,0.296,21,0.067,23,3.121,24,1.238,26,0.021,27,0.021,54,3.788,55,1.981,60,0.818,69,2.231,72,0.907,91,1.224,92,1.473,101,3.073,102,0.689,114,1.705,115,1.444,116,1.705,145,2.454,149,1.981,163,1.444,165,1.615,178,2.482,186,2.231,192,2.565,194,3.646,211,2.565,292,1.615,294,2.565,295,4.842,296,4.233,297,3.073,298,4.233,299,4.233,300,4.233,301,3.073,302,3.073,303,4.233,304,3.073,305,3.073,306,2.565,307,3.073,308,3.073,309,3.073,310,3.073,311,3.073,312,3.073,313,3.073,314,3.073,315,3.073,316,1.781,317,3.073]],["title/classes/LoginUserDTO.html",[21,0.044,106,1.846]],["body/classes/LoginUserDTO.html",[3,0.386,4,0.334,5,0.334,7,0.555,10,1.457,11,0.032,12,0.943,15,1.818,16,0.486,20,0.386,21,0.069,26,0.025,27,0.025,72,0.943,78,2.222,80,2.899,106,2.921,127,1.365,160,1.612,163,1.719,172,2.899,241,3.658,244,4.003,245,2.58,318,3.341,319,4.003,320,4.003]],["title/entities/Todo.html",[96,1,321,1.846]],["body/entities/Todo.html",[3,0.258,4,0.224,5,0.224,7,0.371,10,1.612,11,0.032,12,1.044,15,1.7,16,0.433,20,0.258,21,0.062,26,0.019,27,0.019,60,1.545,61,1.727,72,1.068,96,1.543,102,0.601,115,1.533,163,1.311,225,2.898,232,1.549,233,1.973,292,1.409,316,2.847,321,3.138,322,1.945,323,2.237,324,3.209,325,2.606,326,3.753,327,2.898,328,2.898,329,2.237,330,3.209,331,3.209,332,3.209,333,4.1,334,2.237,335,2.68,336,3.753,337,2.68,338,4.1,339,3.209,340,2.68,341,2.68,342,4.761,343,2.68,344,2.68,345,2.68,346,3.845,347,2.68,348,3.209,349,3.845,350,2.791,351,2.237,352,2.237,353,2.237,354,1.727,355,1.409,356,2.237]],["title/controllers/TodoController.html",[0,1.283,357,2.053]],["body/controllers/TodoController.html",[0,0.703,2,0.703,3,0.168,4,0.146,5,0.146,7,0.242,8,1.029,10,1.326,11,0.032,12,0.859,14,1.699,16,0.463,17,0.391,20,0.168,21,0.024,22,1.012,23,1.125,24,1.848,26,0.014,27,0.014,72,1.088,96,1.79,100,1.267,102,1.314,110,2.879,111,3.976,112,3.907,114,1.735,115,1.564,116,1.735,123,2.319,124,3.491,125,3.491,126,1.267,127,0.595,195,1.012,221,2.411,223,1.79,225,2.542,229,2.319,230,3.329,232,2.072,233,2.013,235,1.457,355,0.917,357,1.79,358,1.457,359,3.126,360,2.778,361,2.863,362,2.016,363,2.778,364,1.79,365,1.457,366,1.745,367,2.319,368,3.944,369,3.828,370,1.745,371,1.745,372,1.745,373,3.292,374,2.319,375,1.745,376,1.745,377,1.457,378,1.745,379,1.457,380,1.457,381,1.745,382,1.745,383,1.745,384,2.016,385,1.745,386,1.457,387,2.894,388,1.745,389,2.319,390,1.745,391,2.319,392,1.457,393,1.267,394,1.818,395,1.457,396,1.457,397,1.457,398,4.015,399,2.778,400,1.267,401,1.745,402,1.745,403,3.828,404,1.745,405,1.745,406,1.745,407,1.457,408,1.745,409,1.745,410,1.745,411,1.745,412,1.745,413,1.745,414,1.745,415,1.745,416,1.745,417,1.745,418,1.745]],["title/modules/TodoModule.html",[28,1.398,36,1.846]],["body/modules/TodoModule.html",[2,1.952,3,0.363,4,0.314,5,0.314,11,0.032,16,0.578,17,0.844,20,0.363,21,0.052,26,0.024,27,0.024,28,2.126,30,1.804,31,2.322,36,3.474,38,2.808,39,2.181,40,2.181,42,3.123,43,2.426,47,2.731,48,1.978,60,1.001,61,2.426,96,1.522,357,3.454,394,3.151,395,3.141,400,2.731,419,3.141,420,3.141,421,3.763,422,3.763,423,3.141]],["title/injectables/TodoService.html",[91,0.921,394,1.674]],["body/injectables/TodoService.html",[3,0.16,4,0.139,5,0.139,7,0.23,8,0.989,11,0.033,12,0.883,14,2.003,15,1.052,16,0.454,17,0.373,20,0.16,21,0.023,24,1.808,26,0.013,27,0.013,48,0.873,60,1.305,61,1.071,66,1.721,72,0.84,91,0.772,92,0.796,96,1.667,110,0.873,114,1.808,115,1.673,116,1.808,165,1.404,176,1.939,190,1.206,191,1.206,194,1.721,195,2.601,196,1.548,197,1.206,198,1.071,199,1.206,200,1.206,201,1.548,202,1.721,204,1.387,205,1.387,206,1.387,208,1.387,218,1.071,219,1.206,221,2.359,223,1.721,225,3.04,232,2.039,233,2.329,302,3.925,316,1.941,325,0.963,327,1.071,328,1.071,354,1.721,355,2.016,359,2.784,361,2.784,362,1.939,364,2.472,365,2.229,379,2.229,384,1.939,386,2.229,387,2.843,394,1.404,396,1.387,397,1.387,400,1.206,424,1.387,425,2.671,426,1.662,427,3.937,428,3.348,429,1.662,430,2.671,431,1.662,432,2.671,433,3.348,434,2.671,435,1.662,436,1.662,437,3.746,438,2.671,439,1.662,440,1.662,441,2.671,442,1.662,443,2.671,444,1.387,445,1.662,446,1.387,447,1.662,448,1.662,449,1.662,450,1.662,451,1.662,452,1.662,453,3.348,454,3.348,455,3.348,456,4.336,457,3.348,458,2.671,459,1.662,460,1.662,461,1.662,462,2.671,463,1.662,464,1.662]],["title/classes/UpdateTodoDto.html",[21,0.044,387,1.846]],["body/classes/UpdateTodoDto.html",[3,0.44,4,0.381,5,0.381,11,0.031,16,0.526,20,0.44,21,0.063,26,0.027,27,0.027,127,1.557,160,1.839,221,2.4,292,2.4,387,3.167,465,3.811,466,3.811,467,4.566,468,4.566]],["title/classes/UpdateUserDTO.html",[21,0.044,469,1.846]],["body/classes/UpdateUserDTO.html",[3,0.34,4,0.294,5,0.294,7,0.489,10,1.501,11,0.032,12,0.972,15,1.733,16,0.5,20,0.34,21,0.076,26,0.023,27,0.023,60,1.235,72,0.972,78,2.092,80,2.729,102,0.791,119,1.69,127,1.202,160,1.42,163,1.584,172,2.901,224,3.876,232,1.871,233,2.279,241,3.769,244,4.006,245,2.272,292,1.853,364,2.993,466,2.943,469,2.692,470,2.943,471,3.526,472,3.526,473,3.526,474,3.526,475,3.526]],["title/entities/User.html",[60,0.847,321,1.846]],["body/entities/User.html",[3,0.245,4,0.212,5,0.212,7,0.353,10,1.587,11,0.032,12,1.028,15,1.67,16,0.421,20,0.245,21,0.06,26,0.018,27,0.018,60,1.276,66,2.387,72,1.091,78,1.759,80,2.295,96,1.67,102,0.571,163,1.263,232,1.492,233,1.916,292,1.337,316,2.78,321,3.083,322,1.847,324,3.091,325,2.531,326,3.644,327,2.814,328,2.814,329,3.644,330,4.439,331,4.439,332,3.091,333,4.003,334,2.124,336,3.644,338,4.003,339,3.091,342,4.439,348,3.091,350,2.688,351,2.124,352,2.124,353,2.124,354,1.64,355,1.337,356,2.124,359,3.169,476,2.124,477,2.544,478,2.544,479,2.544,480,2.544,481,3.091,482,2.544,483,2.544,484,3.703,485,2.544,486,2.688,487,3.703,488,2.544,489,3.703,490,2.124]],["title/controllers/UserController.html",[0,1.283,491,2.053]],["body/controllers/UserController.html",[0,1.525,2,0.808,3,0.193,4,0.167,5,0.167,7,0.278,8,1.148,10,1.231,11,0.032,12,0.797,14,1.577,16,0.469,17,0.45,20,0.193,21,0.052,22,1.163,24,1.715,26,0.015,27,0.015,60,1.528,71,3.287,72,1.062,78,0.808,100,1.456,102,1.288,110,2.752,111,3.801,112,3.801,114,1.715,115,1.452,116,1.715,117,2.744,124,3.34,125,3.34,126,1.456,127,0.684,178,1.661,195,1.163,201,1.163,202,2.744,232,1.959,233,1.868,355,1.629,369,3.554,373,2.586,374,1.675,377,1.675,380,1.675,391,1.675,392,2.586,393,1.456,398,3.841,403,3.554,407,1.675,469,2.819,491,1.997,492,1.675,493,3.785,494,2.586,495,3.098,496,3.098,497,2.586,498,1.675,499,2.006,500,4.863,501,3.785,502,2.006,503,2.006,504,3.268,505,2.006,506,2.006,507,2.006,508,1.675,509,2.006,510,2.006,511,1.675,512,1.456,513,2.006,514,1.675,515,2.006,516,2.006,517,2.006,518,2.249,519,2.249,520,2.006,521,2.006,522,2.006,523,2.006,524,2.006,525,2.006,526,2.006]],["title/modules/UserModule.html",[28,1.398,37,1.674]],["body/modules/UserModule.html",[2,1.901,3,0.348,4,0.301,5,0.301,11,0.032,16,0.571,17,0.81,20,0.348,21,0.05,26,0.023,27,0.023,28,2.071,30,1.732,31,2.262,37,3.175,38,2.736,39,2.095,40,2.095,42,3.042,43,2.33,47,2.624,48,1.9,60,0.962,96,1.482,147,3.94,178,2.78,423,3.017,490,3.017,491,3.388,511,3.017,512,2.624,527,3.017,528,3.017,529,3.017,530,3.614,531,3.614]],["title/classes/UserQueryDTO.html",[21,0.044,504,2.053]],["body/classes/UserQueryDTO.html",[3,0.346,4,0.299,5,0.299,7,0.497,10,1.515,11,0.032,12,0.981,15,1.745,16,0.346,20,0.346,21,0.049,26,0.023,27,0.023,72,0.981,78,2.324,102,0.805,127,1.224,160,1.446,163,1.602,169,2.605,172,2.921,232,2.239,393,3.41,486,4.034,504,3.028,518,3.802,519,3.802,532,2.995,533,4.698,534,3.588,535,3.588,536,4.698,537,4.698,538,4.698,539,4.698,540,3.588,541,4.698]],["title/injectables/UserService.html",[91,0.921,178,1.398]],["body/injectables/UserService.html",[3,0.157,4,0.136,5,0.136,7,0.226,8,0.975,11,0.033,12,0.877,14,1.993,15,1.398,16,0.451,17,0.366,20,0.157,21,0.046,24,1.886,26,0.013,27,0.013,48,0.858,60,1.606,66,1.697,71,1.918,72,0.912,78,2.127,80,1.383,91,0.761,92,0.782,102,0.366,110,0.858,114,1.886,115,1.597,116,1.886,119,2.133,165,1.383,176,2.755,178,1.155,189,2.197,193,1.911,194,1.052,195,2.824,196,0.946,197,1.185,198,1.052,199,1.185,200,1.185,201,0.946,202,1.697,218,1.052,219,1.185,223,1.697,232,2.167,233,2.317,302,3.905,316,1.526,325,0.946,327,2.132,328,1.052,354,2.446,355,1.383,361,1.911,362,1.911,364,1.697,367,2.197,384,1.911,389,2.197,427,3.168,437,2.197,444,1.362,446,1.362,469,2.58,481,1.362,494,2.197,497,2.197,498,2.197,508,2.197,512,1.185,514,1.362,518,3.536,519,3.536,542,1.362,543,2.632,544,1.632,545,1.632,546,2.632,547,2.632,548,1.632,549,1.632,550,2.632,551,1.632,552,2.632,553,2.632,554,1.632,555,3.795,556,2.632,557,1.632,558,1.632,559,1.632,560,2.632,561,2.632,562,1.632,563,1.632,564,1.632,565,1.632,566,1.632,567,1.632,568,1.632,569,1.632,570,1.632,571,1.632,572,1.632,573,1.362,574,1.632,575,1.632,576,1.632]],["title/coverage.html",[577,3.622]],["body/coverage.html",[0,2.083,1,1.939,5,0.251,6,2.511,11,0.032,18,1.581,21,0.081,26,0.021,27,0.021,60,0.8,72,0.563,91,1.625,93,2.511,96,0.945,98,1.939,99,2.511,106,1.744,119,1.442,128,1.581,131,1.744,145,1.744,161,2.511,162,2.511,174,2.511,178,1.32,196,1.744,221,1.581,222,2.511,236,2.511,246,2.184,247,2.511,289,2.184,290,2.511,294,2.511,318,2.511,321,2.418,323,2.511,357,1.939,358,2.511,387,1.744,394,1.581,424,2.511,465,2.511,469,1.744,470,2.511,476,2.511,486,3.028,491,1.939,492,2.511,504,1.939,532,2.511,542,2.511,577,2.511,578,3.009,579,3.009,580,3.009,581,5.965,582,4.172,583,4.789,584,4.789,585,4.789,586,4.172,587,3.009,588,4.789,589,4.789,590,4.172,591,2.511,592,3.009,593,2.511,594,4.172,595,3.009,596,3.009,597,3.009,598,3.009,599,3.009,600,3.009,601,3.009,602,3.009,603,3.009]],["title/dependencies.html",[31,1.835,604,2.224]],["body/dependencies.html",[11,0.033,17,0.772,21,0.063,26,0.023,27,0.023,31,1.649,48,1.809,51,2.872,52,2.872,55,2.218,59,2.872,127,1.174,149,2.218,151,2.498,186,2.498,193,2.498,245,2.218,268,2.872,306,3.815,325,1.995,350,2.498,605,3.441,606,3.441,607,3.441,608,3.441,609,5.466,610,3.441,611,3.441,612,3.441,613,5.689,614,3.441,615,3.441,616,3.441,617,3.441,618,3.441,619,3.441,620,3.441,621,3.441,622,3.441,623,3.441,624,3.441,625,3.441,626,3.441,627,3.441,628,3.441,629,3.441,630,3.441,631,3.441,632,3.441,633,3.441,634,3.441,635,3.441,636,3.441,637,3.441,638,3.441,639,3.441,640,3.441,641,3.441,642,3.441,643,3.441]],["title/miscellaneous/enumerations.html",[644,1.717,645,3.196]],["body/miscellaneous/enumerations.html",[7,0.642,11,0.031,26,0.027,27,0.027,96,1.73,230,3.998,456,4.909,644,2.984,645,3.864,646,4.629,647,4.629,648,5.508,649,5.508]],["title/miscellaneous/functions.html",[644,1.717,650,3.196]],["body/miscellaneous/functions.html",[7,0.676,11,0.028,26,0.028,27,0.028,591,4.07,593,5.017,644,3.143,650,4.07,651,4.876]],["title/index.html",[7,0.369,652,2.665,653,2.665]],["body/index.html",[4,0.301,11,0.032,26,0.023,27,0.023,96,1.135,102,0.81,252,3.017,254,4.387,654,3.614,655,4.72,656,3.614,657,3.614,658,4.72,659,3.614,660,3.614,661,5.572,662,3.614,663,3.614,664,4.72,665,3.614,666,3.614,667,3.614,668,3.614,669,3.614,670,3.614,671,3.614,672,3.614,673,3.614,674,4.72,675,3.614,676,3.94,677,4.72,678,4.72,679,3.614,680,3.614,681,3.614,682,3.614,683,3.614,684,3.614,685,3.614,686,3.614,687,3.614,688,3.614,689,3.614,690,3.614,691,3.614,692,3.614,693,3.614,694,3.017,695,3.614,696,3.614,697,3.614,698,3.614,699,3.614,700,3.614,701,3.017,702,3.614]],["title/modules.html",[30,2.08]],["body/modules.html",[11,0.027,26,0.027,27,0.027,29,2.957,30,2.199,35,2.659,36,2.659,37,2.411,676,5.065,703,6.068,704,6.068,705,6.068]],["title/overview.html",[706,3.622]],["body/overview.html",[2,1.386,11,0.031,18,2.697,26,0.023,27,0.023,29,3.993,30,1.649,31,2.19,32,2.872,33,2.872,34,2.872,35,3.591,36,3.298,37,3.137,38,2.649,39,1.995,40,1.995,92,1.649,128,3.137,141,2.872,143,2.872,144,2.872,145,2.974,160,1.386,178,2.619,322,2.498,394,2.697,419,2.872,420,2.872,527,2.872,528,2.872,529,2.872,573,2.872,706,2.872,707,4.57,708,3.441,709,3.441]],["title/properties.html",[163,1.306,604,2.224]],["body/properties.html",[11,0.031,26,0.028,27,0.028,102,1.078,163,1.639,694,4.012,701,4.012,710,4.806,711,4.806,712,4.806]]],"invertedIndex":[["",{"_index":11,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["0",{"_index":581,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":711,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":635,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":620,"title":{},"body":{"dependencies.html":{}}}],["0.2",{"_index":643,"title":{},"body":{"dependencies.html":{}}}],["0.28.5",{"_index":617,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":619,"title":{},"body":{"dependencies.html":{}}}],["0.5.2",{"_index":631,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":585,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":582,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":590,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":597,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":595,"title":{},"body":{"coverage.html":{}}}],["1.17.2",{"_index":625,"title":{},"body":{"dependencies.html":{}}}],["1.2.0",{"_index":623,"title":{},"body":{"dependencies.html":{}}}],["1/1",{"_index":594,"title":{},"body":{"coverage.html":{}}}],["1/3",{"_index":584,"title":{},"body":{"coverage.html":{}}}],["1/4",{"_index":589,"title":{},"body":{"coverage.html":{}}}],["1/5",{"_index":599,"title":{},"body":{"coverage.html":{}}}],["100",{"_index":486,"title":{},"body":{"entities/User.html":{},"classes/UserQueryDTO.html":{},"coverage.html":{}}}],["16",{"_index":574,"title":{},"body":{"injectables/UserService.html":{}}}],["2",{"_index":573,"title":{},"body":{"injectables/UserService.html":{},"overview.html":{}}}],["2.0.0",{"_index":610,"title":{},"body":{"dependencies.html":{}}}],["2.29.3",{"_index":628,"title":{},"body":{"dependencies.html":{}}}],["2.3.3",{"_index":630,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":598,"title":{},"body":{"coverage.html":{}}}],["25",{"_index":588,"title":{},"body":{"coverage.html":{}}}],["3.0.0",{"_index":608,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":637,"title":{},"body":{"dependencies.html":{}}}],["3/4",{"_index":587,"title":{},"body":{"coverage.html":{}}}],["30",{"_index":332,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["33",{"_index":583,"title":{},"body":{"coverage.html":{}}}],["4",{"_index":707,"title":{},"body":{"overview.html":{}}}],["4.0.0",{"_index":632,"title":{},"body":{"dependencies.html":{}}}],["4.0.1",{"_index":607,"title":{},"body":{"dependencies.html":{}}}],["4.1.0",{"_index":606,"title":{},"body":{"dependencies.html":{}}}],["4.18.1",{"_index":621,"title":{},"body":{"dependencies.html":{}}}],["4.3.0",{"_index":642,"title":{},"body":{"dependencies.html":{}}}],["5.0.2",{"_index":627,"title":{},"body":{"dependencies.html":{}}}],["5.10.0",{"_index":616,"title":{},"body":{"dependencies.html":{}}}],["5.2.1",{"_index":614,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":481,"title":{},"body":{"entities/User.html":{},"injectables/UserService.html":{}}}],["6",{"_index":708,"title":{},"body":{"overview.html":{}}}],["6/8",{"_index":596,"title":{},"body":{"coverage.html":{}}}],["7.2.0",{"_index":639,"title":{},"body":{"dependencies.html":{}}}],["7/8",{"_index":601,"title":{},"body":{"coverage.html":{}}}],["75",{"_index":586,"title":{},"body":{"coverage.html":{}}}],["8",{"_index":709,"title":{},"body":{"overview.html":{}}}],["8.0.0",{"_index":609,"title":{},"body":{"dependencies.html":{}}}],["8.0.3",{"_index":615,"title":{},"body":{"dependencies.html":{}}}],["8.2.1",{"_index":611,"title":{},"body":{"dependencies.html":{}}}],["87",{"_index":600,"title":{},"body":{"coverage.html":{}}}],["access",{"_index":170,"title":{},"body":{"classes/AuthResponseDTO.html":{}}}],["accesstoken",{"_index":164,"title":{},"body":{"classes/AuthResponseDTO.html":{}}}],["admin",{"_index":89,"title":{},"body":{"modules/AppModule.html":{}}}],["adminjs",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["adminjs.registeradapter",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["adminjs/express",{"_index":605,"title":{},"body":{"dependencies.html":{}}}],["adminjs/nestjs",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["adminjs/typeorm",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["adminjsoptions",{"_index":87,"title":{},"body":{"modules/AppModule.html":{}}}],["adminmodule",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["adminmodule.createadmin",{"_index":86,"title":{},"body":{"modules/AppModule.html":{}}}],["amazing",{"_index":684,"title":{},"body":{"index.html":{}}}],["api",{"_index":97,"title":{},"body":{"injectables/AppService.html":{},"classes/AuthResponseDTO.html":{},"classes/CreateUserDTO.html":{}}}],["apiforbiddenresponse",{"_index":398,"title":{},"body":{"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["apiinternalservererrorresponse",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["apiokresponse",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["apiproperty",{"_index":172,"title":{},"body":{"classes/AuthResponseDTO.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/UpdateUserDTO.html":{},"classes/UserQueryDTO.html":{}}}],["apiproperty()@isnotempty",{"_index":241,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["apiproperty({description",{"_index":169,"title":{},"body":{"classes/AuthResponseDTO.html":{},"classes/CreateTodoDto.html":{},"classes/UserQueryDTO.html":{}}}],["apiproperty({maximum",{"_index":533,"title":{},"body":{"classes/UserQueryDTO.html":{}}}],["apiquery",{"_index":399,"title":{},"body":{"controllers/TodoController.html":{}}}],["apitags",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["apitags('auth",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["apitags('todos",{"_index":401,"title":{},"body":{"controllers/TodoController.html":{}}}],["apitags('users",{"_index":515,"title":{},"body":{"controllers/UserController.html":{}}}],["app",{"_index":655,"title":{},"body":{"index.html":{}}}],["app.controller",{"_index":44,"title":{},"body":{"modules/AppModule.html":{}}}],["app.service",{"_index":19,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{}}}],["appcontroller",{"_index":1,"title":{"controllers/AppController.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"coverage.html":{}}}],["appmodule",{"_index":29,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["appservice",{"_index":18,"title":{"injectables/AppService.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"coverage.html":{},"overview.html":{}}}],["argon2",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["argon2.argon2d",{"_index":571,"title":{},"body":{"injectables/UserService.html":{}}}],["argon2.hash(createuserdto.password",{"_index":570,"title":{},"body":{"injectables/UserService.html":{}}}],["argon2.verify(user.password",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["argumentshost",{"_index":264,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["array",{"_index":552,"title":{},"body":{"injectables/UserService.html":{}}}],["async",{"_index":71,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["auth",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["auth.controller",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth.strategy",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["authcontroller",{"_index":98,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authenication",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{}}}],["authguard",{"_index":291,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authguard('jwt",{"_index":293,"title":{},"body":{"injectables/JwtAuthGuard.html":{}}}],["authmodule",{"_index":35,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":694,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authresponsedto",{"_index":131,"title":{"classes/AuthResponseDTO.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"coverage.html":{}}}],["authresponsedto(token",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{}}}],["authresponsedto})@apiinternalservererrorresponse({description",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["authservice",{"_index":128,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["autoloadentities",{"_index":82,"title":{},"body":{"modules/AppModule.html":{}}}],["available",{"_index":272,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["await",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":685,"title":{},"body":{"index.html":{}}}],["baseentity",{"_index":348,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["body",{"_index":391,"title":{},"body":{"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["boolean",{"_index":338,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["bootstrap",{"_index":593,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":705,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":703,"title":{},"body":{"modules.html":{}}}],["catch",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["catch(exception",{"_index":263,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["certain",{"_index":269,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["class",{"_index":21,"title":{"classes/AuthResponseDTO.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"classes/LoginUserDTO.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDTO.html":{},"classes/UserQueryDTO.html":{}},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":160,"title":{},"body":{"classes/AuthResponseDTO.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"classes/LoginUserDTO.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDTO.html":{},"classes/UserQueryDTO.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_providers",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":141,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":143,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_imports",{"_index":142,"title":{},"body":{"modules/AuthModule.html":{}}}],["cluster_authmodule_providers",{"_index":144,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_todomodule",{"_index":419,"title":{},"body":{"modules/TodoModule.html":{},"overview.html":{}}}],["cluster_todomodule_providers",{"_index":420,"title":{},"body":{"modules/TodoModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":527,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":528,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_providers",{"_index":529,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["code",{"_index":675,"title":{},"body":{"index.html":{}}}],["column",{"_index":342,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["column({default",{"_index":339,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["column({type",{"_index":329,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["config",{"_index":299,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["config.get('auth.secret",{"_index":314,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["config/configuration",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["configmodule",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":54,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('auth.expirein",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('auth.secret",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('database.databasename",{"_index":83,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.host",{"_index":75,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.password",{"_index":81,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.port",{"_index":77,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.synchronize",{"_index":85,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('database.username",{"_index":79,"title":{},"body":{"modules/AppModule.html":{}}}],["configuration",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["const",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/TodoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["constructor",{"_index":165,"title":{},"body":{"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtStrategy.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["constructor(@inject(configservice",{"_index":309,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(config",{"_index":297,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(httpadapterhost",{"_index":260,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["constructor(private",{"_index":22,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/GlobalExceptionsFilter.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["constructor(todorepository",{"_index":426,"title":{},"body":{"injectables/TodoService.html":{}}}],["constructor(token",{"_index":166,"title":{},"body":{"classes/AuthResponseDTO.html":{}}}],["constructor(userrepository",{"_index":544,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(usersservice",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{}}}],["controller",{"_index":0,"title":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('todos",{"_index":402,"title":{},"body":{"controllers/TodoController.html":{}}}],["controller('users",{"_index":516,"title":{},"body":{"controllers/UserController.html":{}}}],["controllers",{"_index":2,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["coverage",{"_index":577,"title":{"coverage.html":{}},"body":{"coverage.html":{}}}],["create",{"_index":223,"title":{},"body":{"classes/CreateTodoDto.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["create(@body",{"_index":404,"title":{},"body":{"controllers/TodoController.html":{}}}],["create(createtododto",{"_index":365,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["create(createuserdto",{"_index":547,"title":{},"body":{"injectables/UserService.html":{}}}],["created",{"_index":367,"title":{},"body":{"controllers/TodoController.html":{},"injectables/UserService.html":{}}}],["createddate",{"_index":326,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["createdtodo",{"_index":433,"title":{},"body":{"injectables/TodoService.html":{}}}],["createduser",{"_index":567,"title":{},"body":{"injectables/UserService.html":{}}}],["createduserdto",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{}}}],["createquerybuilder('todo",{"_index":454,"title":{},"body":{"injectables/TodoService.html":{}}}],["creates",{"_index":432,"title":{},"body":{"injectables/TodoService.html":{}}}],["createtodo.dto",{"_index":467,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["createtododto",{"_index":221,"title":{"classes/CreateTodoDto.html":{}},"body":{"classes/CreateTodoDto.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["createtododto.name",{"_index":450,"title":{},"body":{"injectables/TodoService.html":{}}}],["createtododto.state",{"_index":451,"title":{},"body":{"injectables/TodoService.html":{}}}],["createuser.dto",{"_index":474,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["createuserdto",{"_index":119,"title":{"classes/CreateUserDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/UpdateUserDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["createuserdto.username",{"_index":569,"title":{},"body":{"injectables/UserService.html":{}}}],["ctx",{"_index":277,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["data",{"_index":237,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["database",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["date().toisostring",{"_index":285,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["decorators",{"_index":10,"title":{},"body":{"controllers/AppController.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDTO.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserQueryDTO.html":{}}}],["default",{"_index":333,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["defination",{"_index":240,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["defined",{"_index":12,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":355,"title":{},"body":{"entities/Todo.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["delete(':id",{"_index":416,"title":{},"body":{"controllers/TodoController.html":{}}}],["delete(':id')@apiokresponse({description",{"_index":383,"title":{},"body":{"controllers/TodoController.html":{}}}],["delete()@apiokresponse({description",{"_index":499,"title":{},"body":{"controllers/UserController.html":{}}}],["delete(id",{"_index":434,"title":{},"body":{"injectables/TodoService.html":{}}}],["deleted",{"_index":384,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["deleteuser",{"_index":494,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["deleteuser(@param('id",{"_index":525,"title":{},"body":{"controllers/UserController.html":{}}}],["deleteuser(id",{"_index":498,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":31,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtStrategy.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":660,"title":{},"body":{"index.html":{}}}],["docs",{"_index":254,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{},"index.html":{}}}],["documentation",{"_index":578,"title":{},"body":{"coverage.html":{}}}],["done",{"_index":649,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["dto",{"_index":224,"title":{},"body":{"classes/CreateTodoDto.html":{},"classes/UpdateUserDTO.html":{}}}],["dto/createtodo.dto",{"_index":396,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["dto/updatetodo.dto",{"_index":397,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["dtos/createuser.dto",{"_index":559,"title":{},"body":{"injectables/UserService.html":{}}}],["dtos/loginuser.dto",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dtos/register",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dtos/updateuser.dto",{"_index":514,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["dtos/userquery.dto",{"_index":513,"title":{},"body":{"controllers/UserController.html":{}}}],["empty",{"_index":537,"title":{},"body":{"classes/UserQueryDTO.html":{}}}],["entities",{"_index":322,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{},"overview.html":{}}}],["entities/todo.entity",{"_index":400,"title":{},"body":{"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{}}}],["entities/user.entity",{"_index":512,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["entity",{"_index":321,"title":{"entities/Todo.html":{},"entities/User.html":{}},"body":{"entities/Todo.html":{},"entities/User.html":{},"coverage.html":{}}}],["enum",{"_index":229,"title":{},"body":{"classes/CreateTodoDto.html":{},"controllers/TodoController.html":{}}}],["enumerations",{"_index":645,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["error",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["exception",{"_index":266,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["exception.getstatus",{"_index":280,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["exceptionfilter",{"_index":259,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["exceptoion",{"_index":249,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["existed",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{}}}],["expiresin",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":20,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":147,"title":{},"body":{"modules/AuthModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":613,"title":{},"body":{"dependencies.html":{}}}],["extends",{"_index":292,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"entities/Todo.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{}}}],["extractjwt",{"_index":305,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":312,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":316,"title":{},"body":{"injectables/JwtStrategy.html":{},"entities/Todo.html":{},"injectables/TodoService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["file",{"_index":5,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["filterbystate",{"_index":360,"title":{},"body":{"controllers/TodoController.html":{}}}],["filterbystate(@query('state",{"_index":411,"title":{},"body":{"controllers/TodoController.html":{}}}],["filterbystate(state",{"_index":371,"title":{},"body":{"controllers/TodoController.html":{}}}],["filters",{"_index":257,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["find",{"_index":555,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":361,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["findall(username",{"_index":550,"title":{},"body":{"injectables/UserService.html":{}}}],["findbystate",{"_index":425,"title":{},"body":{"injectables/TodoService.html":{}}}],["findbystate(state",{"_index":438,"title":{},"body":{"injectables/TodoService.html":{}}}],["findone",{"_index":362,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["findone(@param('id",{"_index":408,"title":{},"body":{"controllers/TodoController.html":{}}}],["findone(id",{"_index":379,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["findone(username",{"_index":553,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid",{"_index":543,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyid(id",{"_index":556,"title":{},"body":{"injectables/UserService.html":{}}}],["finds",{"_index":437,"title":{},"body":{"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["flag",{"_index":356,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["forbidden",{"_index":403,"title":{},"body":{"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["forbidden'})@apiinternalservererrorresponse({description",{"_index":369,"title":{},"body":{"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["formidable",{"_index":622,"title":{},"body":{"dependencies.html":{}}}],["found",{"_index":448,"title":{},"body":{"injectables/TodoService.html":{}}}],["function",{"_index":592,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":650,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generate",{"_index":672,"title":{},"body":{"index.html":{}}}],["get('/filter",{"_index":410,"title":{},"body":{"controllers/TodoController.html":{}}}],["get('/filter')@apiokresponse({description",{"_index":372,"title":{},"body":{"controllers/TodoController.html":{}}}],["get(':id",{"_index":407,"title":{},"body":{"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["get(':id')@apiokresponse({description",{"_index":380,"title":{},"body":{"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["get()@apiokresponse({description",{"_index":377,"title":{},"body":{"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["getall",{"_index":495,"title":{},"body":{"controllers/UserController.html":{}}}],["getall(@query",{"_index":517,"title":{},"body":{"controllers/UserController.html":{}}}],["getall(userquerydto",{"_index":503,"title":{},"body":{"controllers/UserController.html":{}}}],["gethello",{"_index":9,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{}}}],["getmany",{"_index":458,"title":{},"body":{"injectables/TodoService.html":{}}}],["getone",{"_index":460,"title":{},"body":{"injectables/TodoService.html":{}}}],["getonebyid",{"_index":496,"title":{},"body":{"controllers/UserController.html":{}}}],["getonebyid(@param('id",{"_index":521,"title":{},"body":{"controllers/UserController.html":{}}}],["getonebyid(id",{"_index":506,"title":{},"body":{"controllers/UserController.html":{}}}],["getting",{"_index":652,"title":{"index.html":{}},"body":{}}],["global",{"_index":248,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["globalexceptionsfilter",{"_index":246,"title":{"classes/GlobalExceptionsFilter.html":{}},"body":{"classes/GlobalExceptionsFilter.html":{},"coverage.html":{}}}],["grow",{"_index":681,"title":{},"body":{"index.html":{}}}],["h:mm:ss",{"_index":353,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["handler",{"_index":250,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["hashlength",{"_index":575,"title":{},"body":{"injectables/UserService.html":{}}}],["helmet",{"_index":626,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":275,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["here](https://docs.nestjs.com/support",{"_index":691,"title":{},"body":{"index.html":{}}}],["host",{"_index":74,"title":{},"body":{"modules/AppModule.html":{},"classes/GlobalExceptionsFilter.html":{}}}],["host.switchtohttp",{"_index":278,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["httpadapter",{"_index":271,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["httpadapter.getrequesturl(ctx.getrequest",{"_index":287,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["httpadapter.reply(ctx.getresponse",{"_index":288,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["httpadapterhost",{"_index":261,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["httpexception",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/TodoService.html":{}}}],["httpexception('user",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{}}}],["https://docs.nestjs.com/exception",{"_index":256,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["https://nestjs.com](https://nestjs.com",{"_index":698,"title":{},"body":{"index.html":{}}}],["httpstatus",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/TodoService.html":{}}}],["httpstatus.bad_request",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{}}}],["httpstatus.internal_server_error",{"_index":281,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["id",{"_index":233,"title":{},"body":{"classes/CreateTodoDto.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":579,"title":{},"body":{"coverage.html":{}}}],["ignoreexpiration",{"_index":315,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["implements",{"_index":258,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["import",{"_index":16,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{}}}],["index",{"_index":7,"title":{"index.html":{}},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["info",{"_index":3,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{}}}],["inject",{"_index":69,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["inject(userservice",{"_index":303,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["injectable",{"_index":91,"title":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":92,"title":{},"body":{"injectables/AppService.html":{},"injectables/AuthService.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectrepository",{"_index":444,"title":{},"body":{"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["injectrepository(todo",{"_index":445,"title":{},"body":{"injectables/TodoService.html":{}}}],["injectrepository(user",{"_index":446,"title":{},"body":{"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["inprogress",{"_index":648,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["installation",{"_index":657,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":659,"title":{},"body":{"index.html":{}}}],["instanceof",{"_index":279,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["isdeleted",{"_index":327,"title":{},"body":{"entities/Todo.html":{},"injectables/TodoService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["isglobal",{"_index":65,"title":{},"body":{"modules/AppModule.html":{}}}],["ismodified",{"_index":328,"title":{},"body":{"entities/Todo.html":{},"injectables/TodoService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["isnotempty",{"_index":244,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/UpdateUserDTO.html":{}}}],["join",{"_index":687,"title":{},"body":{"index.html":{}}}],["jwt",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtauthguard",{"_index":289,"title":{"injectables/JwtAuthGuard.html":{}},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["jwtfromrequest",{"_index":311,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtservice",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":145,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":695,"title":{},"body":{"index.html":{}}}],["left",{"_index":536,"title":{},"body":{"classes/UserQueryDTO.html":{}}}],["leftjoinandselect('todo.user",{"_index":457,"title":{},"body":{"injectables/TodoService.html":{}}}],["length",{"_index":331,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["license",{"_index":701,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":679,"title":{},"body":{"index.html":{}}}],["licensed](license",{"_index":702,"title":{},"body":{"index.html":{}}}],["list",{"_index":373,"title":{},"body":{"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["load",{"_index":67,"title":{},"body":{"modules/AppModule.html":{}}}],["login",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["login(logindto",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["login(loginuserdto",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{}}}],["logindto",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{}}}],["logindto.password",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["logins",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["loginuserdto",{"_index":106,"title":{"classes/LoginUserDTO.html":{}},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/LoginUserDTO.html":{},"coverage.html":{}}}],["manytoone",{"_index":349,"title":{},"body":{"entities/Todo.html":{}}}],["manytoone(undefined",{"_index":345,"title":{},"body":{"entities/Todo.html":{}}}],["matching",{"_index":27,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["maximum",{"_index":541,"title":{},"body":{"classes/UserQueryDTO.html":{}}}],["memorycost",{"_index":572,"title":{},"body":{"injectables/UserService.html":{}}}],["metadata",{"_index":634,"title":{},"body":{"dependencies.html":{}}}],["method",{"_index":273,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["methods",{"_index":8,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["miscellaneous",{"_index":644,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{}}}],["mit",{"_index":678,"title":{},"body":{"index.html":{}}}],["mode",{"_index":664,"title":{},"body":{"index.html":{}}}],["model",{"_index":324,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["models/todostate.enum",{"_index":235,"title":{},"body":{"classes/CreateTodoDto.html":{},"controllers/TodoController.html":{}}}],["module",{"_index":28,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":30,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["moment",{"_index":350,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{},"dependencies.html":{}}}],["moment().format('mmmm",{"_index":351,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["more",{"_index":690,"title":{},"body":{"index.html":{}}}],["mysql",{"_index":73,"title":{},"body":{"modules/AppModule.html":{}}}],["mysql2",{"_index":629,"title":{},"body":{"dependencies.html":{}}}],["myśliwiec](https://kamilmysliwiec.com",{"_index":696,"title":{},"body":{"index.html":{}}}],["name",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtStrategy.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":677,"title":{},"body":{"index.html":{}}}],["nest.js",{"_index":252,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{},"index.html":{}}}],["nestframework](https://twitter.com/nestframework",{"_index":700,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":17,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/config",{"_index":55,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":268,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":612,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDTO.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"controllers/TodoController.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"classes/UserQueryDTO.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":48,"title":{},"body":{"modules/AppModule.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["new",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["non",{"_index":538,"title":{},"body":{"classes/UserQueryDTO.html":{}}}],["npm",{"_index":658,"title":{},"body":{"index.html":{}}}],["null",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{}}}],["number",{"_index":232,"title":{},"body":{"classes/CreateTodoDto.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{}}}],["occured",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["offical",{"_index":253,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["one",{"_index":441,"title":{},"body":{"injectables/TodoService.html":{}}}],["onetomany",{"_index":489,"title":{},"body":{"entities/User.html":{}}}],["onetomany(undefined",{"_index":483,"title":{},"body":{"entities/User.html":{}}}],["open",{"_index":680,"title":{},"body":{"index.html":{}}}],["optional",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["out",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":706,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":604,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["param",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["parameters",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":466,"title":{},"body":{"classes/UpdateTodoDto.html":{},"classes/UpdateUserDTO.html":{}}}],["partialtype(createtododto",{"_index":468,"title":{},"body":{"classes/UpdateTodoDto.html":{}}}],["partialtype(createuserdto",{"_index":475,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["passport",{"_index":306,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":304,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":308,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":80,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["path",{"_index":286,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["payload",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["please",{"_index":688,"title":{},"body":{"index.html":{}}}],["port",{"_index":76,"title":{},"body":{"modules/AppModule.html":{}}}],["post",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodoController.html":{}}}],["post('/login",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/login')@apiokresponse({description",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/register')@apiokresponse({description",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@apiokresponse({description",{"_index":366,"title":{},"body":{"controllers/TodoController.html":{}}}],["prefix",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["primarygeneratedcolumn",{"_index":336,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["private",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":666,"title":{},"body":{"index.html":{}}}],["project",{"_index":674,"title":{},"body":{"index.html":{}}}],["promise",{"_index":302,"title":{},"body":{"injectables/JwtStrategy.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["promise(async",{"_index":197,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["properties",{"_index":163,"title":{"properties.html":{}},"body":{"classes/AuthResponseDTO.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserQueryDTO.html":{},"properties.html":{}}}],["providers",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{}}}],["put",{"_index":392,"title":{},"body":{"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["put(':id",{"_index":413,"title":{},"body":{"controllers/TodoController.html":{}}}],["put(':id')@apiokresponse({description",{"_index":388,"title":{},"body":{"controllers/TodoController.html":{}}}],["put()@apiokresponse({description",{"_index":509,"title":{},"body":{"controllers/UserController.html":{}}}],["query",{"_index":393,"title":{},"body":{"controllers/TodoController.html":{},"controllers/UserController.html":{},"classes/UserQueryDTO.html":{}}}],["read",{"_index":689,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":23,"title":{},"body":{"controllers/AppController.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/TodoController.html":{}}}],["ref",{"_index":251,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["reflect",{"_index":633,"title":{},"body":{"dependencies.html":{}}}],["register",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["register(createduserdto",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["register(createuserdto",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["registers",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["reject",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["reject(error",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["remove",{"_index":363,"title":{},"body":{"controllers/TodoController.html":{}}}],["remove(@param('id",{"_index":417,"title":{},"body":{"controllers/TodoController.html":{}}}],["remove(id",{"_index":382,"title":{},"body":{"controllers/TodoController.html":{}}}],["repository",{"_index":427,"title":{},"body":{"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["reset",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolve",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["resolve(createdtodo",{"_index":452,"title":{},"body":{"injectables/TodoService.html":{}}}],["resolve(createduser",{"_index":576,"title":{},"body":{"injectables/UserService.html":{}}}],["resolve(new",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["resource",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["resources",{"_index":90,"title":{},"body":{"modules/AppModule.html":{}}}],["response.dto",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["response.dto.ts",{"_index":162,"title":{},"body":{"classes/AuthResponseDTO.html":{},"coverage.html":{}}}],["response.dto.ts:5",{"_index":167,"title":{},"body":{"classes/AuthResponseDTO.html":{}}}],["responsebody",{"_index":282,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["result",{"_index":500,"title":{},"body":{"controllers/UserController.html":{}}}],["results",{"_index":26,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{}}}],["return",{"_index":24,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["returns",{"_index":14,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtStrategy.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":636,"title":{},"body":{"dependencies.html":{}}}],["rootpath",{"_index":88,"title":{},"body":{"modules/AppModule.html":{}}}],["route",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{}}}],["run",{"_index":670,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":638,"title":{},"body":{"dependencies.html":{}}}],["search",{"_index":539,"title":{},"body":{"classes/UserQueryDTO.html":{}}}],["secret",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":313,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["server'})@apiquery({name",{"_index":375,"title":{},"body":{"controllers/TodoController.html":{}}}],["service",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["session",{"_index":624,"title":{},"body":{"dependencies.html":{}}}],["signoptions",{"_index":157,"title":{},"body":{"modules/AuthModule.html":{}}}],["simple",{"_index":654,"title":{},"body":{"index.html":{}}}],["situations",{"_index":270,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["skip",{"_index":518,"title":{},"body":{"controllers/UserController.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{}}}],["soft",{"_index":354,"title":{},"body":{"entities/Todo.html":{},"injectables/TodoService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["source",{"_index":4,"title":{},"body":{"controllers/AppController.html":{},"modules/AppModule.html":{},"injectables/AppService.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"classes/UpdateTodoDto.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":683,"title":{},"body":{"index.html":{}}}],["src/.../main.ts",{"_index":651,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../todostate.enum.ts",{"_index":646,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/app.controller.ts",{"_index":6,"title":{},"body":{"controllers/AppController.html":{},"coverage.html":{}}}],["src/app.controller.ts:9",{"_index":13,"title":{},"body":{"controllers/AppController.html":{}}}],["src/app.module.ts",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["src/app.service.ts",{"_index":93,"title":{},"body":{"injectables/AppService.html":{},"coverage.html":{}}}],["src/app.service.ts:5",{"_index":94,"title":{},"body":{"injectables/AppService.html":{}}}],["src/auth/auth.controller.ts",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:23",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:30",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.guard.ts",{"_index":290,"title":{},"body":{"injectables/JwtAuthGuard.html":{},"coverage.html":{}}}],["src/auth/auth.module.ts",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:12",{"_index":180,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:23",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:46",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.strategy.ts",{"_index":294,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/auth.strategy.ts:14",{"_index":298,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/auth.strategy.ts:24",{"_index":301,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/dtos/loginuser.dto.ts",{"_index":318,"title":{},"body":{"classes/LoginUserDTO.html":{},"coverage.html":{}}}],["src/auth/dtos/loginuser.dto.ts:11",{"_index":319,"title":{},"body":{"classes/LoginUserDTO.html":{}}}],["src/auth/dtos/loginuser.dto.ts:7",{"_index":320,"title":{},"body":{"classes/LoginUserDTO.html":{}}}],["src/auth/dtos/register",{"_index":161,"title":{},"body":{"classes/AuthResponseDTO.html":{},"coverage.html":{}}}],["src/core/globalexceptionhandler.ts",{"_index":247,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{},"coverage.html":{}}}],["src/core/globalexceptionhandler.ts:14",{"_index":262,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["src/core/globalexceptionhandler.ts:17",{"_index":265,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["src/main.ts",{"_index":591,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/todo/dto/createtodo.dto.ts",{"_index":222,"title":{},"body":{"classes/CreateTodoDto.html":{},"coverage.html":{}}}],["src/todo/dto/createtodo.dto.ts:12",{"_index":228,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["src/todo/dto/createtodo.dto.ts:15",{"_index":231,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["src/todo/dto/createtodo.dto.ts:9",{"_index":234,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["src/todo/dto/updatetodo.dto.ts",{"_index":465,"title":{},"body":{"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["src/todo/entities/todo.entity.ts",{"_index":323,"title":{},"body":{"entities/Todo.html":{},"coverage.html":{}}}],["src/todo/entities/todo.entity.ts:18",{"_index":337,"title":{},"body":{"entities/Todo.html":{}}}],["src/todo/entities/todo.entity.ts:21",{"_index":343,"title":{},"body":{"entities/Todo.html":{}}}],["src/todo/entities/todo.entity.ts:24",{"_index":344,"title":{},"body":{"entities/Todo.html":{}}}],["src/todo/entities/todo.entity.ts:27",{"_index":347,"title":{},"body":{"entities/Todo.html":{}}}],["src/todo/entities/todo.entity.ts:34",{"_index":335,"title":{},"body":{"entities/Todo.html":{}}}],["src/todo/entities/todo.entity.ts:37",{"_index":341,"title":{},"body":{"entities/Todo.html":{}}}],["src/todo/entities/todo.entity.ts:41",{"_index":340,"title":{},"body":{"entities/Todo.html":{}}}],["src/todo/models/todostate.enum.ts",{"_index":647,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/todo/todo.controller.ts",{"_index":358,"title":{},"body":{"controllers/TodoController.html":{},"coverage.html":{}}}],["src/todo/todo.controller.ts:33",{"_index":370,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/todo/todo.controller.ts:41",{"_index":378,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/todo/todo.controller.ts:49",{"_index":381,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/todo/todo.controller.ts:58",{"_index":376,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/todo/todo.controller.ts:66",{"_index":390,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/todo/todo.controller.ts:74",{"_index":385,"title":{},"body":{"controllers/TodoController.html":{}}}],["src/todo/todo.module.ts",{"_index":421,"title":{},"body":{"modules/TodoModule.html":{}}}],["src/todo/todo.service.ts",{"_index":424,"title":{},"body":{"injectables/TodoService.html":{},"coverage.html":{}}}],["src/todo/todo.service.ts:10",{"_index":429,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/todo/todo.service.ts:100",{"_index":435,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/todo/todo.service.ts:21",{"_index":431,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/todo/todo.service.ts:44",{"_index":436,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/todo/todo.service.ts:57",{"_index":440,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/todo/todo.service.ts:71",{"_index":439,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/todo/todo.service.ts:86",{"_index":442,"title":{},"body":{"injectables/TodoService.html":{}}}],["src/user/dtos/createuser.dto.ts",{"_index":236,"title":{},"body":{"classes/CreateUserDTO.html":{},"coverage.html":{}}}],["src/user/dtos/createuser.dto.ts:10",{"_index":243,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/user/dtos/createuser.dto.ts:14",{"_index":242,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["src/user/dtos/updateuser.dto.ts",{"_index":470,"title":{},"body":{"classes/UpdateUserDTO.html":{},"coverage.html":{}}}],["src/user/dtos/updateuser.dto.ts:11",{"_index":471,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["src/user/dtos/updateuser.dto.ts:15",{"_index":473,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["src/user/dtos/updateuser.dto.ts:19",{"_index":472,"title":{},"body":{"classes/UpdateUserDTO.html":{}}}],["src/user/dtos/userquery.dto.ts",{"_index":532,"title":{},"body":{"classes/UserQueryDTO.html":{},"coverage.html":{}}}],["src/user/dtos/userquery.dto.ts:12",{"_index":534,"title":{},"body":{"classes/UserQueryDTO.html":{}}}],["src/user/dtos/userquery.dto.ts:16",{"_index":535,"title":{},"body":{"classes/UserQueryDTO.html":{}}}],["src/user/dtos/userquery.dto.ts:7",{"_index":540,"title":{},"body":{"classes/UserQueryDTO.html":{}}}],["src/user/entities/user.entity",{"_index":307,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/user/entities/user.entity.ts",{"_index":476,"title":{},"body":{"entities/User.html":{},"coverage.html":{}}}],["src/user/entities/user.entity.ts:17",{"_index":478,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:20",{"_index":488,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:23",{"_index":482,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:26",{"_index":480,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:30",{"_index":479,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:37",{"_index":477,"title":{},"body":{"entities/User.html":{}}}],["src/user/entities/user.entity.ts:40",{"_index":485,"title":{},"body":{"entities/User.html":{}}}],["src/user/user.controller.ts",{"_index":492,"title":{},"body":{"controllers/UserController.html":{},"coverage.html":{}}}],["src/user/user.controller.ts:33",{"_index":505,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:42",{"_index":507,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:50",{"_index":510,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.controller.ts:58",{"_index":502,"title":{},"body":{"controllers/UserController.html":{}}}],["src/user/user.module.ts",{"_index":530,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.service.ts",{"_index":542,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:13",{"_index":545,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:25",{"_index":551,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:48",{"_index":558,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:61",{"_index":549,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:70",{"_index":557,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:79",{"_index":554,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:88",{"_index":548,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":662,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":665,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":667,"title":{},"body":{"index.html":{}}}],["started",{"_index":653,"title":{"index.html":{}},"body":{}}],["state",{"_index":225,"title":{},"body":{"classes/CreateTodoDto.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["statements",{"_index":580,"title":{},"body":{"coverage.html":{}}}],["statuscode",{"_index":283,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["stay",{"_index":692,"title":{},"body":{"index.html":{}}}],["strategy",{"_index":295,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":15,"title":{},"body":{"controllers/AppController.html":{},"injectables/AppService.html":{},"classes/AuthResponseDTO.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"injectables/TodoService.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{}}}],["sub",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["super",{"_index":310,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":676,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":704,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":640,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":84,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":603,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":602,"title":{},"body":{"coverage.html":{}}}],["take",{"_index":519,"title":{},"body":{"controllers/UserController.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{}}}],["task",{"_index":227,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["test",{"_index":671,"title":{},"body":{"index.html":{}}}],["tests",{"_index":669,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":682,"title":{},"body":{"index.html":{}}}],["this.accesstoken",{"_index":173,"title":{},"body":{"classes/AuthResponseDTO.html":{}}}],["this.appservice.gethello",{"_index":25,"title":{},"body":{"controllers/AppController.html":{}}}],["this.authservice.login(loginuserdto",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.register(createduserdto",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.httpadapterhost",{"_index":276,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["this.jwtservice.sign(payload",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.todorepository",{"_index":453,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.todorepository.create",{"_index":449,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.todorepository.save",{"_index":462,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.todoservice.create(createtododto",{"_index":405,"title":{},"body":{"controllers/TodoController.html":{}}}],["this.todoservice.delete(id",{"_index":418,"title":{},"body":{"controllers/TodoController.html":{}}}],["this.todoservice.findall",{"_index":406,"title":{},"body":{"controllers/TodoController.html":{}}}],["this.todoservice.findbystate(state",{"_index":412,"title":{},"body":{"controllers/TodoController.html":{}}}],["this.todoservice.findone(id",{"_index":409,"title":{},"body":{"controllers/TodoController.html":{}}}],["this.todoservice.update(id",{"_index":415,"title":{},"body":{"controllers/TodoController.html":{}}}],["this.userrepositiry.findone(createtododto.userid",{"_index":447,"title":{},"body":{"injectables/TodoService.html":{}}}],["this.userrepository.create",{"_index":568,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.find",{"_index":560,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone",{"_index":566,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.findone(id",{"_index":565,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userrepository.save",{"_index":561,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.deleteuser(id",{"_index":526,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findall(username",{"_index":520,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.findone(payload.username",{"_index":317,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.userservice.findonebyid(id",{"_index":522,"title":{},"body":{"controllers/UserController.html":{}}}],["this.userservice.updateuser(updateuserdto",{"_index":524,"title":{},"body":{"controllers/UserController.html":{}}}],["this.usersservice.create(createuserdto",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.findone(logindto.username",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{}}}],["throw",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{}}}],["thus",{"_index":274,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["timestamp",{"_index":284,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["todo",{"_index":96,"title":{"entities/Todo.html":{}},"body":{"injectables/AppService.html":{},"classes/CreateTodoDto.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"entities/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{},"index.html":{}}}],["todo.controller",{"_index":422,"title":{},"body":{"modules/TodoModule.html":{}}}],["todo.service",{"_index":395,"title":{},"body":{"controllers/TodoController.html":{},"modules/TodoModule.html":{}}}],["todo.user",{"_index":484,"title":{},"body":{"entities/User.html":{}}}],["todo/entities/todo.entity",{"_index":490,"title":{},"body":{"entities/User.html":{},"modules/UserModule.html":{}}}],["todo/todo.module",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["todocontroller",{"_index":357,"title":{"controllers/TodoController.html":{}},"body":{"controllers/TodoController.html":{},"modules/TodoModule.html":{},"coverage.html":{}}}],["todomodule",{"_index":36,"title":{"modules/TodoModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TodoModule.html":{},"modules.html":{},"overview.html":{}}}],["todorepository",{"_index":430,"title":{},"body":{"injectables/TodoService.html":{}}}],["todos",{"_index":359,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{},"entities/User.html":{}}}],["todoservice",{"_index":394,"title":{"injectables/TodoService.html":{}},"body":{"controllers/TodoController.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"coverage.html":{},"overview.html":{}}}],["todostate",{"_index":230,"title":{},"body":{"classes/CreateTodoDto.html":{},"controllers/TodoController.html":{},"miscellaneous/enumerations.html":{}}}],["todo})@apiforbiddenresponse({description",{"_index":368,"title":{},"body":{"controllers/TodoController.html":{}}}],["token",{"_index":168,"title":{},"body":{"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{}}}],["token(jwt",{"_index":171,"title":{},"body":{"classes/AuthResponseDTO.html":{}}}],["touch",{"_index":693,"title":{},"body":{"index.html":{}}}],["transfer",{"_index":238,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["transformer",{"_index":618,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"injectables/TodoService.html":{},"entities/User.html":{},"injectables/UserService.html":{}}}],["try",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/TodoService.html":{},"injectables/UserService.html":{}}}],["twitter",{"_index":699,"title":{},"body":{"index.html":{}}}],["type",{"_index":72,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthResponseDTO.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"classes/CreateUserDTO.html":{},"classes/GlobalExceptionsFilter.html":{},"injectables/JwtStrategy.html":{},"classes/LoginUserDTO.html":{},"entities/Todo.html":{},"controllers/TodoController.html":{},"injectables/TodoService.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["typeorm",{"_index":325,"title":{},"body":{"entities/Todo.html":{},"injectables/TodoService.html":{},"entities/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":47,"title":{},"body":{"modules/AppModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forfeature([user",{"_index":423,"title":{},"body":{"modules/TodoModule.html":{},"modules/UserModule.html":{}}}],["typeormmodule.forrootasync",{"_index":68,"title":{},"body":{"modules/AppModule.html":{}}}],["ui",{"_index":641,"title":{},"body":{"dependencies.html":{}}}],["undefined",{"_index":334,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["undefined})@apiforbiddenresponse({description",{"_index":374,"title":{},"body":{"controllers/TodoController.html":{},"controllers/UserController.html":{}}}],["unique",{"_index":487,"title":{},"body":{"entities/User.html":{}}}],["unit",{"_index":668,"title":{},"body":{"index.html":{}}}],["unknown",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/GlobalExceptionsFilter.html":{},"controllers/UserController.html":{}}}],["unlicensed",{"_index":712,"title":{},"body":{"properties.html":{}}}],["update",{"_index":364,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{},"classes/UpdateUserDTO.html":{},"injectables/UserService.html":{}}}],["update(@param('id",{"_index":414,"title":{},"body":{"controllers/TodoController.html":{}}}],["update(id",{"_index":386,"title":{},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{}}}],["updated",{"_index":389,"title":{},"body":{"controllers/TodoController.html":{},"injectables/UserService.html":{}}}],["updatedtodo",{"_index":443,"title":{},"body":{"injectables/TodoService.html":{}}}],["updatetododto",{"_index":387,"title":{"classes/UpdateTodoDto.html":{}},"body":{"controllers/TodoController.html":{},"injectables/TodoService.html":{},"classes/UpdateTodoDto.html":{},"coverage.html":{}}}],["updatetododto.name",{"_index":463,"title":{},"body":{"injectables/TodoService.html":{}}}],["updatetododto.state",{"_index":464,"title":{},"body":{"injectables/TodoService.html":{}}}],["updateuser",{"_index":497,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuser(@body",{"_index":523,"title":{},"body":{"controllers/UserController.html":{}}}],["updateuser(updateuserdto",{"_index":508,"title":{},"body":{"controllers/UserController.html":{},"injectables/UserService.html":{}}}],["updateuserdto",{"_index":469,"title":{"classes/UpdateUserDTO.html":{}},"body":{"classes/UpdateUserDTO.html":{},"controllers/UserController.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserdto.id",{"_index":562,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.password",{"_index":564,"title":{},"body":{"injectables/UserService.html":{}}}],["updateuserdto.username",{"_index":563,"title":{},"body":{"injectables/UserService.html":{}}}],["url",{"_index":255,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["usefactory",{"_index":70,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user",{"_index":60,"title":{"entities/User.html":{}},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateTodoDto.html":{},"injectables/JwtStrategy.html":{},"entities/Todo.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["user.controller",{"_index":531,"title":{},"body":{"modules/UserModule.html":{}}}],["user.id",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.service",{"_index":511,"title":{},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{}}}],["user.todos",{"_index":346,"title":{},"body":{"entities/Todo.html":{}}}],["user.username",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/dtos/createuser.dto",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["user/entities/user.entity",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"entities/Todo.html":{},"modules/TodoModule.html":{},"injectables/TodoService.html":{}}}],["user/user.module",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/user.service",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["usercontroller",{"_index":491,"title":{"controllers/UserController.html":{}},"body":{"controllers/UserController.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["userid",{"_index":226,"title":{},"body":{"classes/CreateTodoDto.html":{}}}],["usermodule",{"_index":37,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":78,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{},"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/UpdateUserDTO.html":{},"entities/User.html":{},"controllers/UserController.html":{},"classes/UserQueryDTO.html":{},"injectables/UserService.html":{}}}],["userquerydto",{"_index":504,"title":{"classes/UserQueryDTO.html":{}},"body":{"controllers/UserController.html":{},"classes/UserQueryDTO.html":{},"coverage.html":{}}}],["userrepositiry",{"_index":428,"title":{},"body":{"injectables/TodoService.html":{}}}],["userrepository",{"_index":546,"title":{},"body":{"injectables/UserService.html":{}}}],["users",{"_index":493,"title":{},"body":{"controllers/UserController.html":{}}}],["userservice",{"_index":178,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UserController.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usersservice",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["user})@apiforbiddenresponse({description",{"_index":501,"title":{},"body":{"controllers/UserController.html":{}}}],["validate",{"_index":296,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":300,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validation",{"_index":239,"title":{},"body":{"classes/CreateUserDTO.html":{}}}],["validator",{"_index":245,"title":{},"body":{"classes/CreateUserDTO.html":{},"classes/LoginUserDTO.html":{},"classes/UpdateUserDTO.html":{},"dependencies.html":{}}}],["value",{"_index":456,"title":{},"body":{"injectables/TodoService.html":{},"miscellaneous/enumerations.html":{}}}],["varchar",{"_index":330,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["version",{"_index":710,"title":{},"body":{"properties.html":{}}}],["void",{"_index":267,"title":{},"body":{"classes/GlobalExceptionsFilter.html":{}}}],["watch",{"_index":663,"title":{},"body":{"index.html":{}}}],["website",{"_index":697,"title":{},"body":{"index.html":{}}}],["welcome",{"_index":95,"title":{},"body":{"injectables/AppService.html":{}}}],["where('todo.id",{"_index":459,"title":{},"body":{"injectables/TodoService.html":{}}}],["where('todo.isdeleted",{"_index":455,"title":{},"body":{"injectables/TodoService.html":{}}}],["where('todo.state",{"_index":461,"title":{},"body":{"injectables/TodoService.html":{}}}],["whole",{"_index":673,"title":{},"body":{"index.html":{}}}],["written",{"_index":656,"title":{},"body":{"index.html":{}}}],["yarn",{"_index":661,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":686,"title":{},"body":{"index.html":{}}}],["yyyy",{"_index":352,"title":{},"body":{"entities/Todo.html":{},"entities/User.html":{}}}],["zoom",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/TodoModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"controllers/AppController.html":{"url":"controllers/AppController.html","title":"controller - AppController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AppController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.controller.ts\n        \n\n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/app.controller.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Get } from '@nestjs/common';\nimport { AppService } from './app.service';\n\n@Controller()\nexport class AppController {\n  constructor(private readonly appService: AppService) {}\n\n  @Get()\n  getHello(): string {\n    return this.appService.getHello();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nTodoModule\n\nTodoModule\n\nAppModule -->\n\nTodoModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AppService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AppController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            TodoModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { AppController } from './app.controller';\nimport { AppService } from './app.service';\nimport { UserModule } from './user/user.module';\nimport { TodoModule } from './todo/todo.module';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { Database, Resource } from '@adminjs/typeorm';\nimport AdminJS from 'adminjs';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport configuration from './config/configuration';\nimport { AdminModule } from '@adminjs/nestjs';\nimport { User } from './user/entities/user.entity';\nimport { AuthModule } from './auth/auth.module';\n\nAdminJS.registerAdapter({ Database, Resource });\n@Module({\n  imports: [\n    ConfigModule.forRoot({ isGlobal: true, load: [configuration] }),\n    UserModule,\n    TodoModule,\n    TypeOrmModule.forRootAsync({\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        type: 'mysql',\n        host: configService.get('database.host'),\n        port: configService.get('database.port'),\n        username: configService.get('database.username'),\n        password: configService.get('database.password'),\n        autoLoadEntities: true,\n        database: configService.get('database.databaseName'),\n        synchronize: configService.get('database.synchronize'),\n      }),\n    }),\n    AdminModule.createAdmin({\n      adminJsOptions: {\n        rootPath: '/admin',\n        resources: [User],\n      },\n    }),\n    AuthModule,\n  ],\n  controllers: [AppController],\n  providers: [AppService],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AppService.html":{"url":"injectables/AppService.html","title":"injectable - AppService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AppService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/app.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getHello\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getHello\n                        \n                    \n                \n            \n            \n                \ngetHello()\n                \n            \n\n\n            \n                \n                    Defined in src/app.service.ts:5\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         string\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class AppService {\n  getHello(): string {\n    return 'Welcome to Todo API.';\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n            \n                Description\n            \n            \n                Auth Controller Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginUserDTO: LoginUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/login')@ApiOkResponse({description: 'Login Route', type: AuthResponseDTO})@ApiInternalServerErrorResponse({description: 'Error Occured at Server'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginUserDTO\n                                    \n                                                LoginUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(createdUserDTO: CreateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/register')@ApiOkResponse({description: 'Login Route', type: AuthResponseDTO})@ApiInternalServerErrorResponse({description: 'Error Occured at Server'})\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createdUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Controller, Post } from '@nestjs/common';\nimport {\n  ApiInternalServerErrorResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { AuthService } from './auth.service';\nimport { LoginUserDTO } from './dtos/loginuser.dto';\nimport { AuthResponseDTO } from './dtos/register-response.dto';\nimport { CreateUserDTO } from '../user/dtos/createuser.dto';\n\n/**\n * Auth Controller Class\n */\n@ApiTags('auth')\n@Controller('auth')\nexport class AuthController {\n  constructor(private authService: AuthService) {}\n\n  @Post('/login')\n  @ApiOkResponse({ description: 'Login Route', type: AuthResponseDTO })\n  @ApiInternalServerErrorResponse({ description: 'Error Occured at Server' })\n  async login(loginUserDTO: LoginUserDTO) {\n    return this.authService.login(loginUserDTO);\n  }\n\n  @Post('/register')\n  @ApiOkResponse({ description: 'Login Route', type: AuthResponseDTO })\n  @ApiInternalServerErrorResponse({ description: 'Error Occured at Server' })\n  async register(createdUserDTO: CreateUserDTO) {\n    return this.authService.register(createdUserDTO);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_imports\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nUserModule\n\nUserModule\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            UserModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { UserModule } from '../user/user.module';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigService, ConfigModule } from '@nestjs/config';\nimport { AuthService } from './auth.service';\nimport { JwtStrategy } from './auth.strategy';\nimport { AuthController } from './auth.controller';\n\n@Module({\n  imports: [\n    ConfigModule,\n    UserModule,\n    PassportModule,\n    JwtModule.registerAsync({\n      inject: [ConfigService],\n      useFactory: (configService: ConfigService) => ({\n        secret: configService.get('auth.secret'),\n        signOptions: { expiresIn: configService.get('auth.expireIn') },\n      }),\n    }),\n  ],\n  providers: [AuthService, JwtStrategy],\n  controllers: [AuthController],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthResponseDTO.html":{"url":"classes/AuthResponseDTO.html","title":"class - AuthResponseDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthResponseDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/register-response.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(token)\n                    \n                \n                        \n                            \n                                Defined in src/auth/dtos/register-response.dto.ts:5\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        token\n                                                  \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'API Access Token(JWT)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/register-response.dto.ts:5\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class AuthResponseDTO {\n  @ApiProperty({ description: 'API Access Token(JWT)' })\n  accessToken: string;\n\n  constructor(token) {\n    this.accessToken = token;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n            \n                Description\n            \n            \n                Authenication Service Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                login\n                            \n                            \n                                    Async\n                                register\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:12\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        login\n                        \n                    \n                \n            \n            \n                \n                    \n                    login(loginDTO: LoginUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:23\n                \n            \n\n\n            \n                \n                    Logins auth service\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    loginDTO\n                                    \n                                                LoginUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        jwt token\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        register\n                        \n                    \n                \n            \n            \n                \n                    \n                    register(createUserDTO: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:46\n                \n            \n\n\n            \n                \n                    Registers auth service\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        jwt token\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, HttpException, HttpStatus } from '@nestjs/common';\nimport { UserService } from '../user/user.service';\nimport { JwtService } from '@nestjs/jwt';\nimport argon2 from 'argon2';\nimport { AuthResponseDTO } from './dtos/register-response.dto';\nimport { CreateUserDTO } from '../user/dtos/createuser.dto';\nimport { LoginUserDTO } from './dtos/loginuser.dto';\n/**\n * Authenication Service Class\n */\n@Injectable()\nexport class AuthService {\n  constructor(\n    private usersService: UserService,\n    private jwtService: JwtService,\n  ) {}\n\n  /**\n   * Logins auth service\n   * @param loginDTO\n   * @returns  jwt token\n   */\n  async login(loginDTO: LoginUserDTO) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const user = await this.usersService.findOne(loginDTO.userName);\n        if (user == null) {\n          throw new HttpException('User Not Existed', HttpStatus.BAD_REQUEST);\n        } else {\n          if (await argon2.verify(user.password, loginDTO.password)) {\n            const payload = { username: user.userName, sub: user.id };\n            const token = this.jwtService.sign(payload);\n            resolve(new AuthResponseDTO(token));\n          }\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  /**\n   * Registers auth service\n   * @param createUserDTO\n   * @returns  jwt token\n   */\n  async register(createUserDTO: CreateUserDTO) {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const user = await this.usersService.create(createUserDTO);\n        const payload = { username: user.userName, sub: user.id };\n        const token = this.jwtService.sign(payload);\n        resolve(new AuthResponseDTO(token));\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTodoDto.html":{"url":"classes/CreateTodoDto.html","title":"class - CreateTodoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todo/dto/createtodo.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Create todo dto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                state\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Name of Todo Task'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/dto/createtodo.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'State of Todo Task', enum: TodoState})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/dto/createtodo.dto.ts:15\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Id of the User'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/dto/createtodo.dto.ts:9\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { TodoState } from '../models/todostate.enum';\n\n/**\n * Create todo dto class\n */\nexport class CreateTodoDto {\n  @ApiProperty({ description: 'Id of the User' })\n  userId: number;\n\n  @ApiProperty({ description: 'Name of Todo Task' })\n  name: string;\n\n  @ApiProperty({ description: 'State of Todo Task', enum: TodoState })\n  state: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateUserDTO.html":{"url":"classes/CreateUserDTO.html","title":"class - CreateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/createuser.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Data Transfer, validation and API Defination Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/createuser.dto.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/createuser.dto.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\n/**\n * Data Transfer, validation and API Defination Class\n */\nexport class CreateUserDTO {\n  @ApiProperty()\n  @IsNotEmpty()\n  userName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GlobalExceptionsFilter.html":{"url":"classes/GlobalExceptionsFilter.html","title":"class - GlobalExceptionsFilter","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GlobalExceptionsFilter\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/core/globalexceptionhandler.ts\n        \n\n\n            \n                Description\n            \n            \n                Global Exceptoion Handler\nRef: Nest.js Offical Docs url: https://docs.nestjs.com/exception-filters\n\n            \n\n\n            \n                Implements\n            \n            \n                        ExceptionFilter\n            \n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                catch\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(httpAdapterHost: HttpAdapterHost)\n                    \n                \n                        \n                            \n                                Defined in src/core/globalexceptionhandler.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        httpAdapterHost\n                                                  \n                                                        \n                                                                    HttpAdapterHost\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        catch\n                        \n                    \n                \n            \n            \n                \ncatch(exception, host: ArgumentsHost)\n                \n            \n\n\n            \n                \n                    Defined in src/core/globalexceptionhandler.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    exception\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    host\n                                    \n                                            ArgumentsHost\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         void\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  ExceptionFilter,\n  Catch,\n  ArgumentsHost,\n  HttpException,\n  HttpStatus,\n} from '@nestjs/common';\nimport { HttpAdapterHost } from '@nestjs/core';\n/**\n * Global Exceptoion Handler\n * Ref: Nest.js Offical Docs url: https://docs.nestjs.com/exception-filters\n */\n@Catch()\nexport class GlobalExceptionsFilter implements ExceptionFilter {\n  constructor(private readonly httpAdapterHost: HttpAdapterHost) {}\n\n  catch(exception: unknown, host: ArgumentsHost): void {\n    // In certain situations `httpAdapter` might not be available in the\n    // constructor method, thus we should resolve it here.\n    const { httpAdapter } = this.httpAdapterHost;\n\n    const ctx = host.switchToHttp();\n\n    const httpStatus =\n      exception instanceof HttpException\n        ? exception.getStatus()\n        : HttpStatus.INTERNAL_SERVER_ERROR;\n\n    const responseBody = {\n      statusCode: httpStatus,\n      timestamp: new Date().toISOString(),\n      path: httpAdapter.getRequestUrl(ctx.getRequest()),\n    };\n\n    httpAdapter.reply(ctx.getResponse(), responseBody, httpStatus);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtAuthGuard.html":{"url":"injectables/JwtAuthGuard.html","title":"injectable - JwtAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.guard.ts\n        \n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { AuthGuard } from '@nestjs/passport';\n\n@Injectable()\nexport class JwtAuthGuard extends AuthGuard('jwt') {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.strategy.ts\n        \n\n\n            \n                Description\n            \n            \n                Auth Strategy Class\n\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                userService\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(config: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.strategy.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        config\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Private\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: any)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.strategy.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                any\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Private\n                            Readonly\n                        userService\n                        \n                    \n                \n            \n                \n                    \n                        Type :         UserService\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Inject(UserService)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/auth.strategy.ts:14\n                        \n                    \n\n\n        \n    \n\n\n    \n\n\n    \n        import { Injectable, Inject } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { User } from 'src/user/entities/user.entity';\nimport { UserService } from '../user/user.service';\n\n/**\n * Auth Strategy Class\n */\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  @Inject(UserService)\n  private readonly userService: UserService;\n\n  constructor(@Inject(ConfigService) config: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: config.get('auth.secret'),\n      ignoreExpiration: false,\n    });\n  }\n\n  private validate(payload: any): Promise {\n    return this.userService.findOne(payload.username);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoginUserDTO.html":{"url":"classes/LoginUserDTO.html","title":"class - LoginUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoginUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dtos/loginuser.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/loginuser.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/auth/dtos/loginuser.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\n\nexport class LoginUserDTO {\n  @ApiProperty()\n  @IsNotEmpty()\n  userName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/Todo.html":{"url":"entities/Todo.html","title":"entity - Todo","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  Todo\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todo/entities/todo.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Model Class for TypeORM Entity\nEntity - Todo\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdDate\n                            \n                            \n                                id\n                            \n                            \n                                isDeleted\n                            \n                            \n                                isModified\n                            \n                            \n                                name\n                            \n                            \n                                state\n                            \n                            \n                                user\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/entities/todo.entity.ts:34\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/entities/todo.entity.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/entities/todo.entity.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isModified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/entities/todo.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/entities/todo.entity.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        state\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/entities/todo.entity.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        user\n                        \n                    \n                \n            \n                \n                    \n                        Type :         User\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ManyToOne(undefined, user => user.todos)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/todo/entities/todo.entity.ts:27\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Column,\n  Entity,\n  ManyToOne,\n  PrimaryGeneratedColumn,\n} from 'typeorm';\nimport { User } from '../../user/entities/user.entity';\nimport * as moment from 'moment';\n\n/**\n * Model Class for TypeORM Entity\n * Entity - Todo\n */\n@Entity()\nexport class Todo extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column()\n  name: string;\n\n  @Column()\n  state: string;\n\n  @ManyToOne(() => User, (user) => user.todos)\n  user: User;\n\n  @Column({\n    type: 'varchar',\n    length: 30,\n    default: moment().format('MMMM Do YYYY, h:mm:ss a'),\n  })\n  createdDate: string;\n\n  @Column({ default: false })\n  isModified: boolean;\n\n  // soft delete flag\n  @Column({ default: false })\n  isDeleted: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TodoController.html":{"url":"controllers/TodoController.html","title":"controller - TodoController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TodoController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todo/todo.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                todos\n            \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                filterByState\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                remove\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createTodoDto: CreateTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@ApiOkResponse({description: 'Created Todo', type: Todo})@ApiForbiddenResponse({description: 'Forbidden'})@ApiInternalServerErrorResponse({description: 'Error Occured at Server'})\n                \n            \n\n            \n                \n                    Defined in src/todo/todo.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTodoDto\n                                    \n                                                CreateTodoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        filterByState\n                        \n                    \n                \n            \n            \n                \nfilterByState(state: TodoState)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/filter')@ApiOkResponse({description: 'List of Todos', type: undefined})@ApiForbiddenResponse({description: 'Forbidden'})@ApiInternalServerErrorResponse({description: 'Error Occured at Server'})@ApiQuery({name: 'state', enum: TodoState})\n                \n            \n\n            \n                \n                    Defined in src/todo/todo.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                TodoState\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'List of Todos', type: undefined})@ApiForbiddenResponse({description: 'Forbidden'})@ApiInternalServerErrorResponse({description: 'Error Occured at Server'})\n                \n            \n\n            \n                \n                    Defined in src/todo/todo.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         any\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({description: 'Todo', type: Todo})@ApiForbiddenResponse({description: 'Forbidden'})@ApiInternalServerErrorResponse({description: 'Error Occured at Server'})\n                \n            \n\n            \n                \n                    Defined in src/todo/todo.controller.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        remove\n                        \n                    \n                \n            \n            \n                \nremove(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete(':id')@ApiOkResponse({description: 'Deleted Todo', type: Todo})@ApiForbiddenResponse({description: 'Forbidden'})@ApiInternalServerErrorResponse({description: 'Error Occured at Server'})\n                \n            \n\n            \n                \n                    Defined in src/todo/todo.controller.ts:74\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateTodoDto: UpdateTodoDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put(':id')@ApiOkResponse({description: 'Updated Todo', type: Todo})@ApiForbiddenResponse({description: 'Forbidden'})@ApiInternalServerErrorResponse({description: 'Error Occured at Server'})\n                \n            \n\n            \n                \n                    Defined in src/todo/todo.controller.ts:66\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTodoDto\n                                    \n                                                UpdateTodoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Controller,\n  Get,\n  Post,\n  Body,\n  Put,\n  Param,\n  Delete,\n  Query,\n} from '@nestjs/common';\nimport { TodoService } from './todo.service';\nimport { CreateTodoDto } from './dto/createtodo.dto';\nimport { UpdateTodoDto } from './dto/updatetodo.dto';\nimport { TodoState } from './models/todostate.enum';\nimport {\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiOkResponse,\n  ApiQuery,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { Todo } from './entities/todo.entity';\n\n@ApiTags('todos')\n@Controller('todos')\nexport class TodoController {\n  constructor(private readonly todoService: TodoService) {}\n\n  @Post()\n  @ApiOkResponse({ description: 'Created Todo', type: Todo })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiInternalServerErrorResponse({ description: 'Error Occured at Server' })\n  create(@Body() createTodoDto: CreateTodoDto) {\n    return this.todoService.create(createTodoDto);\n  }\n\n  @Get()\n  @ApiOkResponse({ description: 'List of Todos', type: [Todo] })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiInternalServerErrorResponse({ description: 'Error Occured at Server' })\n  findAll() {\n    return this.todoService.findAll();\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ description: 'Todo', type: Todo })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiInternalServerErrorResponse({ description: 'Error Occured at Server' })\n  findOne(@Param('id') id: number) {\n    return this.todoService.findOne(id);\n  }\n\n  @Get('/filter')\n  @ApiOkResponse({ description: 'List of Todos', type: [Todo] })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiInternalServerErrorResponse({ description: 'Error Occured at Server' })\n  @ApiQuery({ name: 'state', enum: TodoState })\n  filterByState(@Query('state') state: TodoState) {\n    return this.todoService.findByState(state);\n  }\n\n  @Put(':id')\n  @ApiOkResponse({ description: 'Updated Todo', type: Todo })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiInternalServerErrorResponse({ description: 'Error Occured at Server' })\n  update(@Param('id') id: number, @Body() updateTodoDto: UpdateTodoDto) {\n    return this.todoService.update(id, updateTodoDto);\n  }\n\n  @Delete(':id')\n  @ApiOkResponse({ description: 'Deleted Todo', type: Todo })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiInternalServerErrorResponse({ description: 'Error Occured at Server' })\n  remove(@Param('id') id: number) {\n    return this.todoService.delete(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TodoModule.html":{"url":"modules/TodoModule.html","title":"module - TodoModule","body":"\n                   \n\n\n\n\n    Modules\n    TodoModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_TodoModule\n\n\n\ncluster_TodoModule_providers\n\n\n\n\nTodoService\n\nTodoService\n\n\n\nTodoModule\n\nTodoModule\n\nTodoModule -->\n\nTodoService->TodoModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/todo/todo.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TodoService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TodoController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TodoService } from './todo.service';\nimport { TodoController } from './todo.controller';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { User } from '../user/entities/user.entity';\nimport { Todo } from './entities/todo.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Todo])],\n  controllers: [TodoController],\n  providers: [TodoService],\n})\nexport class TodoModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TodoService.html":{"url":"injectables/TodoService.html","title":"injectable - TodoService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  TodoService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todo/todo.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                create\n                            \n                            \n                                delete\n                            \n                            \n                                findAll\n                            \n                            \n                                findByState\n                            \n                            \n                                findOne\n                            \n                            \n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(todoRepository: Repository, userRepositiry: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/todo/todo.service.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        todoRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userRepositiry\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        create\n                        \n                    \n                \n            \n            \n                \ncreate(createTodoDto: CreateTodoDto)\n                \n            \n\n\n            \n                \n                    Defined in src/todo/todo.service.ts:21\n                \n            \n\n\n            \n                \n                    Creates todo service\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTodoDto\n                                    \n                                                CreateTodoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        createdTodo\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        delete\n                        \n                    \n                \n            \n            \n                \ndelete(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/todo/todo.service.ts:100\n                \n            \n\n\n            \n                \n                    Soft Delete the todo\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Deleted Todo\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll()\n                \n            \n\n\n            \n                \n                    Defined in src/todo/todo.service.ts:44\n                \n            \n\n\n            \n                \n                    Finds all\n\n\n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        All Todos\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findByState\n                        \n                    \n                \n            \n            \n                \nfindByState(state: string)\n                \n            \n\n\n            \n                \n                    Defined in src/todo/todo.service.ts:71\n                \n            \n\n\n            \n                \n                    Finds by state\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    state\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Todos\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/todo/todo.service.ts:57\n                \n            \n\n\n            \n                \n                    Finds one\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Todo\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        update\n                        \n                    \n                \n            \n            \n                \nupdate(id: number, updateTodoDto: UpdateTodoDto)\n                \n            \n\n\n            \n                \n                    Defined in src/todo/todo.service.ts:86\n                \n            \n\n\n            \n                \n                    Update the Todo\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTodoDto\n                                    \n                                                UpdateTodoDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        updateDTodo\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { HttpException, HttpStatus, Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { CreateTodoDto } from './dto/createtodo.dto';\nimport { UpdateTodoDto } from './dto/updatetodo.dto';\nimport { Todo } from './entities/todo.entity';\nimport { Repository } from 'typeorm';\nimport { User } from '../user/entities/user.entity';\n\n@Injectable()\nexport class TodoService {\n  constructor(\n    @InjectRepository(Todo) private todoRepository: Repository,\n    @InjectRepository(User) private userRepositiry: Repository,\n  ) {}\n\n  /**\n   * Creates todo service\n   * @param createTodoDto\n   * @returns createdTodo\n   */\n  create(createTodoDto: CreateTodoDto): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const user = await this.userRepositiry.findOne(createTodoDto.userId);\n        if (user == null) {\n          throw new HttpException('User Not Found', HttpStatus.BAD_REQUEST);\n        } else {\n          const createdTodo = await this.todoRepository.create({\n            name: createTodoDto.name,\n            state: createTodoDto.state,\n            user: user,\n          });\n          resolve(createdTodo);\n        }\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n  /**\n   * Finds all\n   * @returns All Todos\n   */\n  findAll(): Promise {\n    return this.todoRepository\n      .createQueryBuilder('todo')\n      .where('todo.isDeleted = :value', { value: false })\n      .leftJoinAndSelect('todo.user', 'user')\n      .getMany();\n  }\n\n  /**\n   * Finds one\n   * @param id\n   * @returns Todo\n   */\n  findOne(id: number): Promise {\n    return this.todoRepository\n      .createQueryBuilder('todo')\n      .where('todo.id = :value', { value: id })\n      .where('todo.isDeleted = :value', { value: false })\n      .leftJoinAndSelect('todo.user', 'user')\n      .getOne();\n  }\n\n  /**\n   * Finds by state\n   * @param state\n   * @returns Todos\n   */\n  findByState(state: string): Promise {\n    return this.todoRepository\n      .createQueryBuilder('todo')\n      .where('todo.state = :value', { value: state })\n      .where('todo.isDeleted = :value', { value: false })\n      .leftJoinAndSelect('todo.user', 'user')\n      .getMany();\n  }\n\n  /**\n   * Update the Todo\n   * @param id\n   * @param updateTodoDto\n   * @returns updateDTodo\n   */\n  update(id: number, updateTodoDto: UpdateTodoDto): Promise {\n    return this.todoRepository.save({\n      id: id,\n      name: updateTodoDto.name,\n      state: updateTodoDto.state,\n      isModified: true,\n    });\n  }\n\n  /**\n   * Soft Delete the todo\n   * @param id\n   * @returns Deleted Todo\n   */\n  delete(id: number): Promise {\n    return this.todoRepository.save({\n      id: id,\n      isDeleted: true,\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTodoDto.html":{"url":"classes/UpdateTodoDto.html","title":"class - UpdateTodoDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTodoDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/todo/dto/updatetodo.dto.ts\n        \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { PartialType } from '@nestjs/swagger';\nimport { CreateTodoDto } from './createtodo.dto';\n\nexport class UpdateTodoDto extends PartialType(CreateTodoDto) {}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDTO.html":{"url":"classes/UpdateUserDTO.html","title":"class - UpdateUserDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/updateuser.dto.ts\n        \n\n\n            \n                Description\n            \n            \n                Update user dto class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                id\n                            \n                            \n                                password\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/updateuser.dto.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/updateuser.dto.ts:19\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty()@IsNotEmpty()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/updateuser.dto.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty, PartialType } from '@nestjs/swagger';\nimport { IsNotEmpty } from 'class-validator';\nimport { CreateUserDTO } from './createuser.dto';\n\n/**\n * Update user dto class\n */\nexport class UpdateUserDTO extends PartialType(CreateUserDTO) {\n  @ApiProperty()\n  @IsNotEmpty()\n  id: number;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  userName: string;\n\n  @ApiProperty()\n  @IsNotEmpty()\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"entities/User.html":{"url":"entities/User.html","title":"entity - User","body":"\n                   \n\n\n\n\n\n\n\n  Entities\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/entities/user.entity.ts\n        \n\n\n            \n                Description\n            \n            \n                Model Class for TypeORM Entity\nEntity - User\n\n            \n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                createdDate\n                            \n                            \n                                id\n                            \n                            \n                                isDeleted\n                            \n                            \n                                isModified\n                            \n                            \n                                password\n                            \n                            \n                                todos\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        createdDate\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 30, default: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        id\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @PrimaryGeneratedColumn()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isDeleted\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isModified\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({default: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:26\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 50})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:23\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        todos\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Todo[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @OneToMany(undefined, todo => todo.user)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:40\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Column({type: 'varchar', length: 100, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/entities/user.entity.ts:20\n                        \n                    \n\n\n        \n    \n\n    \n\n\n    \n        import * as moment from 'moment';\nimport {\n  Entity,\n  Column,\n  PrimaryGeneratedColumn,\n  BaseEntity,\n  OneToMany,\n} from 'typeorm';\nimport { Todo } from '../../todo/entities/todo.entity';\n/**\n * Model Class for TypeORM Entity\n * Entity - User\n */\n@Entity()\nexport class User extends BaseEntity {\n  @PrimaryGeneratedColumn()\n  id: number;\n\n  @Column({ type: 'varchar', length: 100, unique: true })\n  userName: string;\n\n  @Column({ type: 'varchar', length: 50 })\n  password: string;\n\n  @Column({ default: false })\n  isModified: boolean;\n\n  // soft delete flag\n  @Column({ default: false })\n  isDeleted: boolean;\n\n  @Column({\n    type: 'varchar',\n    length: 30,\n    default: moment().format('MMMM Do YYYY, h:mm:ss a'),\n  })\n  createdDate: string;\n\n  @OneToMany(() => Todo, (todo) => todo.user)\n  todos: Todo[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UserController.html":{"url":"controllers/UserController.html","title":"controller - UserController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UserController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n            \n                Description\n            \n            \n                User Controller Class\n\n            \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                    Async\n                                getAll\n                            \n                            \n                                    Async\n                                getOneById\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        deleteUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete()@ApiOkResponse({description: 'User Result', type: User})@ApiForbiddenResponse({description: 'Forbidden'})@ApiInternalServerErrorResponse({description: 'Error Occured at Server'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    getAll(userQueryDTO: UserQueryDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()@ApiOkResponse({description: 'List of Users', type: undefined})@ApiForbiddenResponse({description: 'Forbidden'})@ApiInternalServerErrorResponse({description: 'Error Occured at Server'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:33\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userQueryDTO\n                                    \n                                                UserQueryDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getOneById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getOneById(id: number)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get(':id')@ApiOkResponse({description: 'User Result', type: User})@ApiForbiddenResponse({description: 'Forbidden'})@ApiInternalServerErrorResponse({description: 'Error Occured at Server'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(updateUserDTO: UpdateUserDTO)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Put()@ApiOkResponse({description: 'User Result', type: User})@ApiForbiddenResponse({description: 'Forbidden'})@ApiInternalServerErrorResponse({description: 'Error Occured at Server'})\n                \n            \n\n            \n                \n                    Defined in src/user/user.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDTO\n                                    \n                                                UpdateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  Controller,\n  Get,\n  Param,\n  Put,\n  Query,\n  Delete,\n} from '@nestjs/common';\nimport {\n  ApiForbiddenResponse,\n  ApiInternalServerErrorResponse,\n  ApiOkResponse,\n  ApiTags,\n} from '@nestjs/swagger';\nimport { UserService } from './user.service';\nimport { User } from './entities/user.entity';\nimport { UserQueryDTO } from './dtos/userquery.dto';\nimport { UpdateUserDTO } from './dtos/updateuser.dto';\n\n/**\n * User Controller Class\n */\n@ApiTags('users')\n@Controller('users')\nexport class UserController {\n  constructor(private userService: UserService) {}\n\n  @Get()\n  @ApiOkResponse({ description: 'List of Users', type: [User] })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiInternalServerErrorResponse({ description: 'Error Occured at Server' })\n  async getAll(@Query() userQueryDTO: UserQueryDTO) {\n    const { userName, skip, take } = userQueryDTO;\n    return await this.userService.findAll(userName, skip, take);\n  }\n\n  @Get(':id')\n  @ApiOkResponse({ description: 'User Result', type: User })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiInternalServerErrorResponse({ description: 'Error Occured at Server' })\n  async getOneById(@Param('id') id: number) {\n    return await this.userService.findOneById(id);\n  }\n\n  @Put()\n  @ApiOkResponse({ description: 'User Result', type: User })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiInternalServerErrorResponse({ description: 'Error Occured at Server' })\n  async updateUser(@Body() updateUserDTO: UpdateUserDTO) {\n    return await this.userService.updateUser(updateUserDTO);\n  }\n\n  @Delete()\n  @ApiOkResponse({ description: 'User Result', type: User })\n  @ApiForbiddenResponse({ description: 'Forbidden' })\n  @ApiInternalServerErrorResponse({ description: 'Error Occured at Server' })\n  async deleteUser(@Param('id') id: number) {\n    return await this.userService.deleteUser(id);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nUserService \n\nUserService \n\n\n\nUserModule\n\nUserModule\n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UserController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { TypeOrmModule } from '@nestjs/typeorm';\nimport { UserController } from './user.controller';\nimport { UserService } from './user.service';\nimport { User } from './entities/user.entity';\nimport { Todo } from '../todo/entities/todo.entity';\n\n@Module({\n  imports: [TypeOrmModule.forFeature([User, Todo])],\n  controllers: [UserController],\n  providers: [UserService],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserQueryDTO.html":{"url":"classes/UserQueryDTO.html","title":"class - UserQueryDTO","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserQueryDTO\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dtos/userquery.dto.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                skip\n                            \n                            \n                                take\n                            \n                            \n                                userName\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        skip\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({maximum: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/userquery.dto.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        take\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({maximum: 100})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/userquery.dto.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userName\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @ApiProperty({description: 'Username (left empty string for non search query)'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dtos/userquery.dto.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { ApiProperty } from '@nestjs/swagger';\n\nexport class UserQueryDTO {\n  @ApiProperty({\n    description: 'Username (left empty string for non search query)',\n  })\n  userName: string;\n\n  @ApiProperty({\n    maximum: 100,\n  })\n  skip: number;\n  @ApiProperty({\n    maximum: 100,\n  })\n  take: number;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n            \n                Description\n            \n            \n                User Service Class\n\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                deleteUser\n                            \n                            \n                                findAll\n                            \n                            \n                                findOne\n                            \n                            \n                                findOneById\n                            \n                            \n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: Repository)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:13\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createUserDTO: CreateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:88\n                \n            \n\n\n            \n                \n                    Registers user service\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createUserDTO\n                                    \n                                                CreateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        Promise (Created User)\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        deleteUser\n                        \n                    \n                \n            \n            \n                \ndeleteUser(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:61\n                \n            \n\n\n            \n                \n                    Soft Delete the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        soft deleted user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findAll\n                        \n                    \n                \n            \n            \n                \nfindAll(username: string, skip: number, take: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:25\n                \n            \n\n\n            \n                \n                    Finds all\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    skip\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    take\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        array of user\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOne\n                        \n                    \n                \n            \n            \n                \nfindOne(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:79\n                \n            \n\n\n            \n                \n                    Find user by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        User\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        findOneById\n                        \n                    \n                \n            \n            \n                \nfindOneById(id: number)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:70\n                \n            \n\n\n            \n                \n                    Find user by id\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                number\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        User\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        updateUser\n                        \n                    \n                \n            \n            \n                \nupdateUser(updateUserDTO: UpdateUserDTO)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:48\n                \n            \n\n\n            \n                \n                    Update the user\n\n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDTO\n                                    \n                                                UpdateUserDTO\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        updated user\n\n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { InjectRepository } from '@nestjs/typeorm';\nimport { Repository } from 'typeorm';\nimport { User } from './entities/user.entity';\nimport { CreateUserDTO } from './dtos/createuser.dto';\nimport argon2 from 'argon2';\nimport { UpdateUserDTO } from './dtos/updateuser.dto';\n\n/**\n * User Service Class\n */\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectRepository(User) private userRepository: Repository,\n  ) {}\n\n  /**\n   * Finds all\n   * @param username\n   * @param skip\n   * @param take\n   * @returns array of user\n   */\n  findAll(username: string, skip: number, take: number) {\n    if (username == '') {\n      return this.userRepository.find({\n        where: { isDeleted: false },\n        skip: skip,\n        take: take,\n      });\n    } else {\n      return this.userRepository.find({\n        where: {\n          userName: username,\n          isDeleted: false,\n        },\n        skip: skip,\n        take: take,\n      });\n    }\n  }\n  /**\n   * Update the user\n   * @param updateUserDTO\n   * @returns updated user\n   */\n  updateUser(updateUserDTO: UpdateUserDTO): Promise {\n    return this.userRepository.save({\n      id: updateUserDTO.id,\n      userName: updateUserDTO.userName,\n      password: updateUserDTO.password,\n      isModified: true,\n    });\n  }\n  /**\n   * Soft Delete the user\n   * @param id\n   * @returns soft deleted user\n   */\n  deleteUser(id: number): Promise {\n    return this.userRepository.save({ id: id, isDeleted: true });\n  }\n\n  /**\n   * Find user by id\n   * @param id\n   * @returns User\n   */\n  findOneById(id: number): Promise {\n    return this.userRepository.findOne(id);\n  }\n\n  /**\n   * Find user by id\n   * @param username\n   * @returns User\n   */\n  findOne(username: string): Promise {\n    return this.userRepository.findOne({ userName: username });\n  }\n\n  /**\n   * Registers user service\n   * @param createUserDTO\n   * @returns Promise (Created User)\n   */\n  async create(createUserDTO: CreateUserDTO): Promise {\n    return new Promise(async (resolve, reject) => {\n      try {\n        const createdUser = await this.userRepository.create({\n          userName: createUserDTO.userName,\n          password: await argon2.hash(createUserDTO.password, {\n            type: argon2.argon2d,\n            memoryCost: 2 ** 16,\n            hashLength: 50,\n          }),\n        });\n        resolve(createdUser);\n      } catch (error) {\n        reject(error);\n      }\n    });\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/app.controller.ts\n            \n            controller\n            AppController\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/app.service.ts\n            \n            injectable\n            AppService\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/auth/auth.guard.ts\n            \n            injectable\n            JwtAuthGuard\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                75 %\n                (3/4)\n            \n        \n        \n            \n                \n                src/auth/auth.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/auth/dtos/loginuser.dto.ts\n            \n            class\n            LoginUserDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/dtos/register-response.dto.ts\n            \n            class\n            AuthResponseDTO\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/core/globalexceptionhandler.ts\n            \n            class\n            GlobalExceptionsFilter\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/todo/dto/createtodo.dto.ts\n            \n            class\n            CreateTodoDto\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/todo/dto/updatetodo.dto.ts\n            \n            class\n            UpdateTodoDto\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/todo/entities/todo.entity.ts\n            \n            entity\n            Todo\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/todo/todo.controller.ts\n            \n            controller\n            TodoController\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/todo/todo.service.ts\n            \n            injectable\n            TodoService\n            \n                75 %\n                (6/8)\n            \n        \n        \n            \n                \n                src/user/dtos/createuser.dto.ts\n            \n            class\n            CreateUserDTO\n            \n                33 %\n                (1/3)\n            \n        \n        \n            \n                \n                src/user/dtos/updateuser.dto.ts\n            \n            class\n            UpdateUserDTO\n            \n                25 %\n                (1/4)\n            \n        \n        \n            \n                \n                src/user/dtos/userquery.dto.ts\n            \n            class\n            UserQueryDTO\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/entities/user.entity.ts\n            \n            entity\n            User\n            \n                100 %\n                (1/1)\n            \n        \n        \n            \n                \n                src/user/user.controller.ts\n            \n            controller\n            UserController\n            \n                20 %\n                (1/5)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                87 %\n                (7/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @adminjs/express : ^4.1.0\n        \n            @adminjs/nestjs : ^4.0.1\n        \n            @adminjs/typeorm : ^3.0.0\n        \n            @nestjs/common : ^8.0.0\n        \n            @nestjs/config : ^2.0.0\n        \n            @nestjs/core : ^8.0.0\n        \n            @nestjs/jwt : ^8.0.0\n        \n            @nestjs/passport : ^8.2.1\n        \n            @nestjs/platform-express : ^8.0.0\n        \n            @nestjs/swagger : ^5.2.1\n        \n            @nestjs/typeorm : ^8.0.3\n        \n            adminjs : ^5.10.0\n        \n            argon2 : ^0.28.5\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            express : ^4.18.1\n        \n            express-formidable : ^1.2.0\n        \n            express-session : ^1.17.2\n        \n            helmet : ^5.0.2\n        \n            moment : ^2.29.3\n        \n            mysql2 : ^2.3.3\n        \n            passport : ^0.5.2\n        \n            passport-jwt : ^4.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            swagger-ui-express : ^4.3.0\n        \n            typeorm : 0.2\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            TodoState   (src/.../todostate.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/todo/models/todostate.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        TodoState\n                    \n                \n                        \n                            \n                                 Todo\n                            \n                        \n                        \n                            \n                                Value : Todo\n                            \n                        \n                        \n                            \n                                 InProgress\n                            \n                        \n                        \n                            \n                                Value : InProgress\n                            \n                        \n                        \n                            \n                                 Done\n                            \n                        \n                        \n                            \n                                Value : Done\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n  \n\nDescription\nA simple Todo app written in Nest.js\nInstallation\n$ npm installRunning the app\n# development\n$ yarn start\n\n# watch mode\n$ yarn start:dev\n\n# production mode\n$ yarn start:prodTest\n# unit tests\n$ npm run test\n\n## Docs\n\nGenerate Docs for Whole Project Code\n\n$ yarn docs\n\n## Support\n\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please [read more here](https://docs.nestjs.com/support).\n\n## Stay in touch\n\n- Author - [Kamil Myśliwiec](https://kamilmysliwiec.com)\n- Website - [https://nestjs.com](https://nestjs.com/)\n- Twitter - [@nestframework](https://twitter.com/nestframework)\n\n## License\n\nNest is [MIT licensed](LICENSE).\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TodoModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AppModule_providers\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_TodoModule\n\n\n\ncluster_TodoModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nTodoModule\n\nTodoModule\n\nAppModule -->\n\nTodoModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAuthModule -->\n\nUserModule->AuthModule\n\n\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAppService\n\nAppService\n\nAppModule -->\n\nAppService->AppModule\n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nTodoService\n\nTodoService\n\nTodoModule -->\n\nTodoService->TodoModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        4 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    4 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    2 Entities\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    8 Classes\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
